%!PS-Adobe-3.1 EPSF-3.0
%%Title: robot0124bw.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: EECS
%%CreationDate: 11/9/2002
%%BoundingBox: 0 0 249 168
%%HiResBoundingBox: 0 0 248.7007 167.4405
%%CropBox: 0 0 248.7007 167.4405
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: robot0124bw.eps 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -167.44 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 167.44 li
248.701 167.44 li
248.701 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
gsave % PSGState
0 0 mo
249 0 li
249 167 li
0 167 li
0 0 li
clp
gsave % PSGState
248.701 167.44 mo
0 167.44 li
0 0 li
248.701 0 li
248.701 167.44 li
clp
89.0127 39.7148 mo
89.4951 39.7148 89.8872 40.1074 89.8872 40.5898 cv
89.8872 41.0723 89.4951 41.4648 89.0127 41.4648 cv
88.5298 41.4648 88.1382 41.0723 88.1382 40.5898 cv
88.1382 40.1074 88.5298 39.7148 89.0127 39.7148 cv
false sop
0 0 0 .1 cmyk
ef
.25 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
89.0127 39.7148 mo
89.4951 39.7148 89.8872 40.1074 89.8872 40.5898 cv
89.8872 41.0723 89.4951 41.4648 89.0127 41.4648 cv
88.5298 41.4648 88.1382 41.0723 88.1382 40.5898 cv
88.1382 40.1074 88.5298 39.7148 89.0127 39.7148 cv
cp
0 0 0 .1 cmyk
s
88.1621 33.6191 mo
88.6445 33.6191 89.0366 34.0107 89.0366 34.4932 cv
89.0366 34.9756 88.6445 35.3682 88.1621 35.3682 cv
87.6792 35.3682 87.2876 34.9756 87.2876 34.4932 cv
87.2876 34.0107 87.6792 33.6191 88.1621 33.6191 cv
0 0 0 .1 cmyk
ef
88.1621 33.6191 mo
88.6445 33.6191 89.0366 34.0107 89.0366 34.4932 cv
89.0366 34.9756 88.6445 35.3682 88.1621 35.3682 cv
87.6792 35.3682 87.2876 34.9756 87.2876 34.4932 cv
87.2876 34.0107 87.6792 33.6191 88.1621 33.6191 cv
cp
0 0 0 .1 cmyk
s
176.773 29.2959 mo
180.131 29.2959 182.857 32.0215 182.857 35.3799 cv
182.857 38.7383 180.131 41.4639 176.773 41.4639 cv
173.415 41.4639 170.689 38.7383 170.689 35.3799 cv
170.689 32.0215 173.415 29.2959 176.773 29.2959 cv
0 0 0 .1 cmyk
ef
176.773 29.2959 mo
180.131 29.2959 182.857 32.0215 182.857 35.3799 cv
182.857 38.7383 180.131 41.4639 176.773 41.4639 cv
173.415 41.4639 170.689 38.7383 170.689 35.3799 cv
170.689 32.0215 173.415 29.2959 176.773 29.2959 cv
cp
0 0 0 .1 cmyk
s
32.5498 31.8164 mo
33.7925 31.8164 34.8013 32.8252 34.8013 34.0684 cv
34.8013 35.3105 33.7925 36.3193 32.5498 36.3193 cv
31.3071 36.3193 30.2988 35.3105 30.2988 34.0684 cv
30.2988 32.8252 31.3071 31.8164 32.5498 31.8164 cv
0 0 0 .1 cmyk
ef
32.5498 31.8164 mo
33.7925 31.8164 34.8013 32.8252 34.8013 34.0684 cv
34.8013 35.3105 33.7925 36.3193 32.5498 36.3193 cv
31.3071 36.3193 30.2988 35.3105 30.2988 34.0684 cv
30.2988 32.8252 31.3071 31.8164 32.5498 31.8164 cv
cp
0 0 0 .1 cmyk
s
168.958 118.787 mo
0 118.787 li
0 125.746 li
168.958 125.746 li
168.958 118.787 li
0 0 0 .1 cmyk
ef
168.958 118.787 mo
0 118.787 li
0 125.746 li
168.958 125.746 li
168.958 118.787 li
cp
0 0 0 .1 cmyk
s
248.701 158.879 mo
244.625 163.478 li
248.701 167.44 li
248.701 158.879 li
0 0 0 .1 cmyk
ef
248.701 158.879 mo
244.625 163.478 li
248.701 167.44 li
248.701 158.879 li
cp
0 0 0 .1 cmyk
s
253.407 134.657 mo
236.197 122.881 li
216.569 151.569 li
233.779 163.347 li
253.407 134.657 li
0 0 0 .1 cmyk
ef
253.407 134.657 mo
236.197 122.881 li
216.569 151.569 li
233.779 163.347 li
253.407 134.657 li
cp
0 0 0 .1 cmyk
s
228.29 134.472 mo
216.83 126.62 li
213.871 130.918 li
225.35 138.77 li
228.29 134.472 li
0 0 0 .1 cmyk
ef
228.29 134.472 mo
216.83 126.62 li
213.871 130.918 li
225.35 138.77 li
228.29 134.472 li
cp
0 0 0 .1 cmyk
s
226.206 126.955 mo
211.88 117.131 li
202.056 131.476 li
216.401 141.3 li
226.206 126.955 li
0 0 0 .1 cmyk
ef
226.206 126.955 mo
211.88 117.131 li
202.056 131.476 li
216.401 141.3 li
226.206 126.955 li
cp
0 0 0 .1 cmyk
s
180.251 68.832 mo
176.772 68.832 li
176.772 73.167 li
180.251 73.167 li
180.251 68.832 li
0 0 0 .1 cmyk
ef
180.251 68.832 mo
176.772 68.832 li
176.772 73.167 li
180.251 73.167 li
180.251 68.832 li
cp
0 0 0 .1 cmyk
s
180.251 2.44824 mo
176.772 2.44824 li
176.772 6.7832 li
180.251 6.7832 li
180.251 2.44824 li
0 0 0 .1 cmyk
ef
180.251 2.44824 mo
176.772 2.44824 li
176.772 6.7832 li
180.251 6.7832 li
180.251 2.44824 li
cp
0 0 0 .1 cmyk
s
178.949 63.5293 mo
178.074 63.5293 li
178.074 68.7383 li
178.949 68.7383 li
178.949 63.5293 li
0 0 0 .1 cmyk
ef
178.949 63.5293 mo
178.074 63.5293 li
178.074 68.7383 li
178.949 68.7383 li
178.949 63.5293 li
cp
0 0 0 .1 cmyk
s
178.949 0 mo
178.074 0 li
178.074 2.61523 li
178.949 2.61523 li
178.949 0 li
0 0 0 .1 cmyk
ef
178.949 0 mo
178.074 0 li
178.074 2.61523 li
178.949 2.61523 li
178.949 0 li
cp
0 0 0 .1 cmyk
s
204.177 94.8418 mo
202.243 97.7256 li
205.852 100.145 li
207.787 97.2607 li
204.177 94.8418 li
0 0 0 .1 cmyk
ef
204.177 94.8418 mo
202.243 97.7256 li
205.852 100.145 li
207.787 97.2607 li
204.177 94.8418 li
cp
0 0 0 .1 cmyk
s
206.82 98.5635 mo
206.335 99.2705 li
210.67 102.173 li
211.155 101.466 li
206.82 98.5635 li
0 0 0 .1 cmyk
ef
206.82 98.5635 mo
206.335 99.2705 li
210.67 102.173 li
211.155 101.466 li
206.82 98.5635 li
cp
0 0 0 .1 cmyk
s
177.683 79.6416 mo
175.749 82.5254 li
179.358 84.9443 li
181.292 82.0605 li
177.683 79.6416 li
0 0 0 .1 cmyk
ef
177.683 79.6416 mo
175.749 82.5254 li
179.358 84.9443 li
181.292 82.0605 li
177.683 79.6416 li
cp
0 0 0 .1 cmyk
s
248.625 160.5 mo
180.511 160.5 li
180.511 167.44 li
248.625 167.44 li
248.625 160.5 li
0 0 0 .1 cmyk
ef
248.625 160.5 mo
180.511 160.5 li
180.511 167.44 li
248.625 167.44 li
248.625 160.5 li
cp
0 0 0 .1 cmyk
s
215.731 98.4697 mo
212.569 104.666 li
248.701 123.051 li
248.701 115.25 li
215.731 98.4697 li
0 0 0 .1 cmyk
ef
215.731 98.4697 mo
212.569 104.666 li
248.701 123.051 li
248.701 115.25 li
215.731 98.4697 li
cp
0 0 0 .1 cmyk
s
161.571 107.065 mo
152.008 107.065 li
152.008 116.61 li
161.571 116.61 li
161.571 107.065 li
0 0 0 .1 cmyk
ef
161.571 107.065 mo
152.008 107.065 li
152.008 116.61 li
161.571 116.61 li
161.571 107.065 li
cp
0 0 0 .1 cmyk
s
71.7261 107.065 mo
62.1631 107.065 li
62.1631 116.61 li
71.7261 116.61 li
71.7261 107.065 li
0 0 0 .1 cmyk
ef
71.7261 107.065 mo
62.1631 107.065 li
62.1631 116.61 li
71.7261 116.61 li
71.7261 107.065 li
cp
0 0 0 .1 cmyk
s
108.732 27.7881 mo
74.2007 23.8623 li
71.0381 51.6592 li
105.569 55.585 li
108.732 27.7881 li
0 0 0 .1 cmyk
ef
108.732 27.7881 mo
74.2007 23.8623 li
71.0381 51.6592 li
105.569 55.585 li
108.732 27.7881 li
cp
0 0 0 .1 cmyk
s
101.997 16.9043 mo
91.1128 15.6768 li
89.9409 26.04 li
100.825 27.2676 li
101.997 16.9043 li
0 0 0 .1 cmyk
ef
101.997 16.9043 mo
91.1128 15.6768 li
89.9409 26.04 li
100.825 27.2676 li
101.997 16.9043 li
cp
0 0 0 .1 cmyk
s
102.704 17.0723 mo
96.7876 20.7188 li
103.132 31.082 li
109.067 27.4541 li
102.704 17.0723 li
0 0 0 .1 cmyk
ef
102.704 17.0723 mo
96.7876 20.7188 li
103.132 31.082 li
109.067 27.4541 li
102.704 17.0723 li
cp
0 0 0 .1 cmyk
s
73.2891 24.8301 mo
77.2891 32.5518 li
95.02 23.3232 li
91.02 15.6211 li
73.2891 24.8301 li
0 0 0 .1 cmyk
ef
73.2891 24.8301 mo
77.2891 32.5518 li
95.02 23.3232 li
91.02 15.6211 li
73.2891 24.8301 li
cp
0 0 0 .1 cmyk
s
104.304 25.6309 mo
78.4058 22.6904 li
75.4658 48.5889 li
101.364 51.5293 li
104.304 25.6309 li
0 0 0 .1 cmyk
ef
104.304 25.6309 mo
78.4058 22.6904 li
75.4658 48.5889 li
101.364 51.5293 li
104.304 25.6309 li
cp
0 0 0 .1 cmyk
s
98.0898 45.1475 mo
94.6294 44.7568 li
93.8481 51.6592 li
97.3086 52.0498 li
98.0898 45.1475 li
0 0 0 .1 cmyk
ef
98.0898 45.1475 mo
94.6294 44.7568 li
93.8481 51.6592 li
97.3086 52.0498 li
98.0898 45.1475 li
cp
0 0 0 .1 cmyk
s
91.8198 46.8779 mo
88.3594 46.4863 li
87.9688 49.9473 li
91.4106 50.3379 li
91.8198 46.8779 li
0 0 0 .1 cmyk
ef
91.8198 46.8779 mo
88.3594 46.4863 li
87.9688 49.9473 li
91.4106 50.3379 li
91.8198 46.8779 li
cp
0 0 0 .1 cmyk
s
83.9873 46.8779 mo
80.5449 46.4863 li
80.1543 49.9473 li
83.5967 50.3379 li
83.9873 46.8779 li
0 0 0 .1 cmyk
ef
83.9873 46.8779 mo
80.5449 46.4863 li
80.1543 49.9473 li
83.5967 50.3379 li
83.9873 46.8779 li
cp
0 0 0 .1 cmyk
s
95.2617 24.6816 mo
84.8989 23.5098 li
84.5083 26.9512 li
94.8711 28.1426 li
95.2617 24.6816 li
0 0 0 .1 cmyk
ef
95.2617 24.6816 mo
84.8989 23.5098 li
84.5083 26.9512 li
94.8711 28.1426 li
95.2617 24.6816 li
cp
0 0 0 .1 cmyk
s
4.74707 101.41 mo
2.99854 101.41 li
2.99854 103.14 li
4.74707 103.14 li
4.74707 101.41 li
0 0 0 .1 cmyk
ef
4.74707 101.41 mo
2.99854 101.41 li
2.99854 103.14 li
4.74707 103.14 li
4.74707 101.41 li
cp
0 0 0 .1 cmyk
s
8.20801 100.107 mo
-.480957 100.107 li
-.480957 104.442 li
8.20801 104.442 li
8.20801 100.107 li
0 0 0 .1 cmyk
ef
8.20801 100.107 mo
-.480957 100.107 li
-.480957 104.442 li
8.20801 104.442 li
8.20801 100.107 li
cp
0 0 0 .1 cmyk
s
97.2715 100.981 mo
79.0195 100.981 li
79.0195 119.215 li
97.2715 119.215 li
97.2715 100.981 li
0 0 0 .1 cmyk
ef
97.2715 100.981 mo
79.0195 100.981 li
79.0195 119.215 li
97.2715 119.215 li
97.2715 100.981 li
cp
0 0 0 .1 cmyk
s
29.3745 0 mo
11.8872 0 li
10.7568 9.96484 li
28.0225 11.918 li
29.3745 0 li
0 0 0 .1 cmyk
ef
29.3745 0 mo
11.8872 0 li
10.7568 9.96484 li
28.0225 11.918 li
29.3745 0 li
cp
0 0 0 .1 cmyk
s
27.6313 0 mo
13.6304 0 li
12.6729 8.43945 li
26.4966 10.002 li
27.6313 0 li
0 0 0 .1 cmyk
ef
27.6313 0 mo
13.6304 0 li
12.6729 8.43945 li
26.4966 10.002 li
27.6313 0 li
cp
0 0 0 .1 cmyk
s
168.958 123.141 mo
158.52 123.141 li
158.52 165.71 li
168.958 165.71 li
168.958 123.141 li
0 0 0 .1 cmyk
ef
168.958 123.141 mo
158.52 123.141 li
158.52 165.71 li
168.958 165.71 li
168.958 123.141 li
cp
0 0 0 .1 cmyk
s
183.73 0 mo
181.125 0 li
181.125 31.4727 li
183.73 31.4727 li
183.73 0 li
0 0 0 .1 cmyk
ef
183.73 0 mo
181.125 0 li
181.125 31.4727 li
183.73 31.4727 li
183.73 0 li
cp
0 0 0 .1 cmyk
s
105.234 .773438 mo
100.062 .197266 li
98.8716 10.8945 li
104.044 11.4717 li
105.234 .773438 li
0 0 0 .1 cmyk
ef
105.234 .773438 mo
100.062 .197266 li
98.8716 10.8945 li
104.044 11.4717 li
105.234 .773438 li
cp
0 0 0 .1 cmyk
s
103.169 .532227 mo
102.146 .419922 li
102.034 1.46191 li
103.058 1.57324 li
103.169 .532227 li
0 0 0 .1 cmyk
ef
103.169 .532227 mo
102.146 .419922 li
102.034 1.46191 li
103.058 1.57324 li
103.169 .532227 li
cp
0 0 0 .1 cmyk
s
102.072 10.207 mo
101.048 10.0947 li
100.937 11.1367 li
101.96 11.248 li
102.072 10.207 li
0 0 0 .1 cmyk
ef
102.072 10.207 mo
101.048 10.0947 li
100.937 11.1367 li
101.96 11.248 li
102.072 10.207 li
cp
0 0 0 .1 cmyk
s
31.3901 12.0674 mo
26.1992 11.4902 li
25.0083 22.207 li
30.1992 22.7646 li
31.3901 12.0674 li
0 0 0 .1 cmyk
ef
31.3901 12.0674 mo
26.1992 11.4902 li
25.0083 22.207 li
30.1992 22.7646 li
31.3901 12.0674 li
cp
0 0 0 .1 cmyk
s
29.3247 11.8438 mo
28.2827 11.7139 li
28.1714 12.7549 li
29.2134 12.8672 li
29.3247 11.8438 li
0 0 0 .1 cmyk
ef
29.3247 11.8438 mo
28.2827 11.7139 li
28.1714 12.7549 li
29.2134 12.8672 li
29.3247 11.8438 li
cp
0 0 0 .1 cmyk
s
28.2271 21.5 mo
27.1851 21.3887 li
27.0737 22.4307 li
28.1152 22.542 li
28.2271 21.5 li
0 0 0 .1 cmyk
ef
28.2271 21.5 mo
27.1851 21.3887 li
27.0737 22.4307 li
28.1152 22.542 li
28.2271 21.5 li
cp
0 0 0 .1 cmyk
s
136.547 112.089 mo
136.547 117.299 li
147.32 117.299 li
147.32 112.089 li
136.547 112.089 li
0 0 0 .1 cmyk
ef
136.547 112.089 mo
136.547 117.299 li
147.32 117.299 li
147.32 112.089 li
136.547 112.089 li
cp
0 0 0 .1 cmyk
s
136.547 114.173 mo
136.547 115.215 li
137.589 115.215 li
137.589 114.173 li
136.547 114.173 li
0 0 0 .1 cmyk
ef
136.547 114.173 mo
136.547 115.215 li
137.589 115.215 li
137.589 114.173 li
136.547 114.173 li
cp
0 0 0 .1 cmyk
s
146.278 114.173 mo
146.278 115.215 li
147.32 115.215 li
147.32 114.173 li
146.278 114.173 li
0 0 0 .1 cmyk
ef
146.278 114.173 mo
146.278 115.215 li
147.32 115.215 li
147.32 114.173 li
146.278 114.173 li
cp
0 0 0 .1 cmyk
s
113.793 112.089 mo
113.774 117.299 li
124.546 117.299 li
124.565 112.089 li
113.793 112.089 li
0 0 0 .1 cmyk
ef
113.793 112.089 mo
113.774 117.299 li
124.546 117.299 li
124.565 112.089 li
113.793 112.089 li
cp
0 0 0 .1 cmyk
s
113.774 114.173 mo
113.774 115.215 li
114.817 115.215 li
114.817 114.173 li
113.774 114.173 li
0 0 0 .1 cmyk
ef
113.774 114.173 mo
113.774 115.215 li
114.817 115.215 li
114.817 114.173 li
113.774 114.173 li
cp
0 0 0 .1 cmyk
s
123.505 114.173 mo
123.505 115.215 li
124.546 115.215 li
124.565 114.173 li
123.505 114.173 li
0 0 0 .1 cmyk
ef
123.505 114.173 mo
123.505 115.215 li
124.546 115.215 li
124.565 114.173 li
123.505 114.173 li
cp
0 0 0 .1 cmyk
s
36.897 112.089 mo
36.8784 117.299 li
47.6509 117.299 li
47.6694 112.089 li
36.897 112.089 li
0 0 0 .1 cmyk
ef
36.897 112.089 mo
36.8784 117.299 li
47.6509 117.299 li
47.6694 112.089 li
36.897 112.089 li
cp
0 0 0 .1 cmyk
s
36.897 114.173 mo
36.8784 115.215 li
37.939 115.215 li
37.939 114.173 li
36.897 114.173 li
0 0 0 .1 cmyk
ef
36.897 114.173 mo
36.8784 115.215 li
37.939 115.215 li
37.939 114.173 li
36.897 114.173 li
cp
0 0 0 .1 cmyk
s
46.6279 114.173 mo
46.6279 115.215 li
47.6694 115.215 li
47.6694 114.173 li
46.6279 114.173 li
0 0 0 .1 cmyk
ef
46.6279 114.173 mo
46.6279 115.215 li
47.6694 115.215 li
47.6694 114.173 li
46.6279 114.173 li
cp
0 0 0 .1 cmyk
s
126.352 87.9951 mo
125.625 99.9775 li
true sop
0 0 0 1 cmyk
s
126.352 87.9951 mo
125.849 99.9775 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
126.053 99.9961 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
126.258 100.87 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
126.482 100.87 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
126.724 101.726 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
126.965 101.726 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
127.524 106.917 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
128.696 117.28 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
129.254 117.745 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
129.868 118.564 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
130.408 118.489 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
130.798 117.559 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
131.319 117.484 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
131.728 116.871 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
131.654 113.875 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
131.915 112.945 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
132.51 113.521 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
133.961 117.262 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
134.706 117.969 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
135.226 117.82 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
135.728 117.652 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
136.529 118.322 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
137.049 118.136 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
137.589 117.949 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
138.11 117.745 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
138.612 117.541 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
139.487 118.117 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
140.007 117.875 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
140.529 117.634 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
140.026 115.363 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
140.901 115.885 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
142.222 117.15 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
142.724 116.871 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
142.352 115.084 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
141.719 113.038 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
142.166 112.759 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
145.943 117.541 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
144.194 113.912 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
143.933 112.61 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
143.84 111.587 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
144.25 111.289 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
144.659 110.973 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
144.51 109.968 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
144.882 109.651 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
145.254 109.336 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
145.05 108.35 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
145.384 108.033 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
145.98 107.94 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
149.18 110.396 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
150.204 110.582 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
150.594 110.173 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
150.966 109.745 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
150.687 108.74 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
149.98 107.438 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
150.315 107.028 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
151.32 107.121 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
151.655 106.693 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
151.264 105.745 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
154.446 107.271 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
156.66 108.015 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
157.739 107.959 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
158.818 107.866 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
160.66 108.163 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
202.019 130.713 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
202.745 129.393 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
203.47 128.053 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
204.159 126.694 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
204.81 125.336 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
205.461 123.959 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
206.076 122.582 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
206.652 121.188 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
207.229 119.773 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
207.768 118.359 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
208.29 116.927 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
208.773 115.494 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
209.238 114.062 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
209.685 112.61 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
210.113 111.141 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
210.503 109.671 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
210.857 108.2 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
211.192 106.73 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
211.508 105.242 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
211.805 103.754 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
212.066 102.266 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
203.879 99.5117 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
202.335 97.9307 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
202.502 96.6094 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
203.507 95.3633 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
212.978 94.7305 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
213.089 93.2236 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
213.164 91.7168 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
213.219 90.1904 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
213.239 88.6836 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
213.239 87.1582 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
213.201 85.6514 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
213.164 84.125 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
179.432 84.7021 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
177.627 83.9209 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
175.823 83.1953 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
176.585 82.2275 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
176.493 81.3535 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
178.074 80.2188 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
212.029 73.5762 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
211.768 72.0879 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
211.49 70.5996 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
211.173 69.1104 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
210.82 67.6416 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
210.448 66.1709 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
179.265 73.2783 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
175.656 73.3525 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
176.232 72.2363 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
175.935 71.3623 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
175.637 70.5059 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
207.712 57.501 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
207.172 56.0869 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
206.596 54.6729 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
206 53.2773 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
181.051 63.0273 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
204.736 50.5244 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
204.084 49.166 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
203.396 47.8076 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
202.67 46.4688 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
201.945 45.1475 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
201.182 43.8262 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
200.401 42.543 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
199.6 41.2588 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
198.763 39.9756 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
197.908 38.7285 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
197.051 37.4814 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
196.159 36.2539 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
195.247 35.0449 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
194.298 33.8535 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
193.349 32.6816 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
180.624 41.5752 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
178.502 41.7793 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
176.4 42.0586 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
174.967 41.7793 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
174.149 40.9424 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
172.716 40.7373 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
172.474 39.3057 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
171.618 38.5049 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
171.339 37.0723 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
171.004 35.6396 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
170.632 34.1885 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
180.381 19.9561 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
179.191 19.0254 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
177.981 18.1133 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
176.753 17.2207 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
175.506 16.3457 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
174.242 15.5088 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
172.976 14.6719 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
171.693 13.8721 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
170.39 13.0908 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
169.07 12.3467 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
167.749 11.6016 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
166.409 10.8945 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
165.05 10.207 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
163.693 9.55566 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
162.315 8.9043 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
160.92 8.29004 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
159.525 7.69434 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
158.129 7.13672 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
156.715 6.59668 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
155.283 6.07617 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
153.85 5.57422 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
152.399 5.1084 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
150.948 4.68066 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
149.497 4.25293 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
148.027 3.8623 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
146.557 3.49023 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
145.087 3.15527 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
143.599 2.83887 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
142.11 2.55957 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
140.622 2.2998 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
139.115 2.05762 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
137.608 1.85254 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
136.12 1.66699 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
134.593 1.51758 li
0 0 0 1 cmyk
s
126.352 87.9951 mo
133.086 1.3877 li
0 0 0 1 cmyk
s
124.351 83.2402 mo
126.908 83.2402 128.983 85.3154 128.983 87.8721 cv
128.983 90.4297 126.908 92.5049 124.351 92.5049 cv
121.793 92.5049 119.718 90.4297 119.718 87.8721 cv
119.718 85.3154 121.793 83.2402 124.351 83.2402 cv
false sop
0 0 0 0 cmyk
ef
.5 lw
10 ml
124.351 83.2402 mo
126.908 83.2402 128.983 85.3154 128.983 87.8721 cv
128.983 90.4297 126.908 92.5049 124.351 92.5049 cv
121.793 92.5049 119.718 90.4297 119.718 87.8721 cv
119.718 85.3154 121.793 83.2402 124.351 83.2402 cv
cp
true sop
0 0 0 1 cmyk
s
124.361 87.8838 mo
128.994 88.1631 li
0 0 0 1 cmyk
s
.25 lw
4 ml
-1354.18 1586.23 mo
-1354.18 -1355.4 li
1587.45 -1355.4 li
1587.45 1586.23 li
-1354.18 1586.23 li
cp
0 0 0 1 cmyk
s
grestore % PSGState
grestore % PSGState
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 10.0
%%For: (EECS) (UC Berkeley)
%%Title: (robot0124bw.eps)
%%CreationDate: 11/9/2002 1:35 AM
%AI9_DataStream
%Gb"-6HZ,LrOY=4o)pieRJOL@Elk/(J94kGZ6qKD,@1pIM4C\d0%%:WF9h8-:U?(ilqX%YGqK^qUA4P-2hLbpbZ<6Ik0@eV'eTLi@
%Y9)T6IJ)U]X7%.fr5W_65,CutFVB,WjA6nFp8_R!pQo5m^=dCGi`q=RGu@l<UNnhuY)Z<K8I-p.]-fNRDm(g$h0jQqF)h$<c0<L'
%c0_"XC`ZrS?i4d=rmC3*\'JAe>s>m2]fs3cPS6R&panB$o:,@?07U=%^C0s`Y:d!7^:=)]I"1tOGLtmLDs0.Q>Pd=Sjk\a[i#':?
%o[D]Io?YUB#?_!$otPotq>JJqGIQaZ05k1qO3c5MdI.F'qu$$X3WER\a5?f@r,VDinh90EYO6X%S(VQSp$VD\](j$!Is_^H)u?RN
%h"[M*+e9)1g\>4UO,r-t^No%RQS6+$Jf]NA?P^+BGn\1^r3P;V*<5r*V>qn?l14]DebS#Im8J,g,`fX\piHF?Rh"LXZ\SOUf!4*C
%I6!.pUbSei]/[7*Q?H/(/Fpd8dE?_e07WcAk.b8p^UUqAc$XV[p\a-&N_PFAd\.EWJ+`O#o(LD5?JZ.0n.p4;p$Zg*>[IA@'B\K(
%Y0O;%DR!+9;d0+`r:^$2]0VB7=)WZShe\b1hu2O$p"B/%Qaa:!)!$a]044\Bk%gE!)l/l+(/Nr044cEfAo%Y<Lu4FDA'nUSO8'\:
%CUY&5oAq+%5Mj-ProL3<Ch&IH.";'Tq<Q5YY:_KrIe,72`o.cem$ie(ledalN3C9Gj57.66GgLNIJI><_<E6+9qMC*r(bu*^TRUY
%@L)2dmOhiQnNVHpiq2@O>D4<mX2fkL?]DsBFn<<EG5abA)^E+G/XoFaY?oYk?G*tb*M'ha-[&1"F*INTEqAEkIt$n?o'c5@kZU.r
%*)^/$ro%GtrpnS[2>b9.a)<$6>.44nmJ2[,A";FmIf8G2YKj=)?YmFmd)M.<\IU_T&iPeX4S\:#*dm\]4S\9rZY*(+4aD5Im.%DP
%chb!AX?J/\o!@s>4q#^71\^Ope#-!64?\,hq!"QOrFpU^T9cDNBmL\iL8Y$MHh-OFdjIq_S3D5rjO'1jUcnM>8UXL.j<s1`HkN%G
%-gpW[l-n*/Vl-GR:EQ/$drnnjb@s.7VsuU6qG[.`g#JukT0,;cr:ofWa8L")>T]<Qq/L^#+,@o9nK=l&cQ55to]4EaUW8E:4mJ*^
%U\^oOb)auGpaA8qO'I1cTCsZ2Zp3u>HLIuf?@)%=&+8/"GO8O[g7G\#p:*8#]o>%\g.KO?[Fdh;c.-J"BmilTlf7i?p=a8`K@4P8
%Z%hPE/'lAent_eAa5p1_V3P4V)73UW$,r5ca8@JQbtmnEI[hMASm/A.jIB//K=1UCd^/R&4\;R9EI*jqC8n(nE_7dXOF2*==aV-[
%`7+K@4rSXdQt*5&`#M^70gm*hGSZm*-fHmE%Z`pe/_!T`%Oo=-Je--ko2#;uJ*J-Q8&"l_X"Q[61tZ@.hN'\.Z(5cKLjSImdbIs5
%.rJ&*NR"("9DF!,UWp!VI=+]KJ[:mf%R+:H#N^BG!'Pc5JtsLOmgXg)5(4]o3iH7SF[DDTrUAeC$%MlUna@OV^4#V)06(TBa&2X)
%+"i&qaA54oDY"-`r9Fk(5(!1BD]ZU3:WiS7ogerP:ZHBn5%$TkdcU:nJ,:=*oA[U]h,b+NHWXKG-\K;Gd\rZ$'jt;#B*;n'!999L
%m61a4eUt?+H_/;#J[+[C;:\3>"tJ`1(BE0GbFreXW9+c?`rOZk**]gR$s*ZEb<B`;`u0=[i+])VJ)Wi_!;.#W'6cIHTQ:S6mjC!^
%34>W1&q*O+jb.E9$?2KR&j#t*kP4n%h>TUIPB!6Xol/>bNqb;fX0VJM:YeU@26M6u-`*YK?'_$6_at&e`bNO,\\fS$jT8]<!?=&m
%ZGS_BOiHLgNAg)V);<)4MRHV_>0ID5C#Eo$)-^4DgDa",eLfOURm.c1KOH0fjY&&sCXJO036jXP&%6T<d*YPIal#KO2eCP5CW63Z
%C=73CT8hcL:K%fo8ql#s`)E`6gQ!9VYN<3F?eR:/[5IIK>B>GLjnoN\%#2m&(lRMGg.C4_J[=ce'!_/U4Uh<Y`/bds`h(II.jmn,
%O4=^5S/.(f'A_TQEF/@o##EdhDGX!V`or)b@r!"<3!.,/+-K@VKuCOe,r4Hm7k)!E]VD'Wq][bkV9k%pOrG\+'4\R'E#Zt&(Om<m
%jsr-Shh'8RdpR4r5"(sSq-ePj-=+dA)7.kg1XP!+"Dhme>P">0E1T;(B*S)-rYaA[O(;YEn"5.o^Ma=bg5!ecA02#XkWXNI)Ni18
%@__@!^b4CM5C@qKr:'N75<n@V[f,O,4S\9h%nJ;iZG]orphA0.gD1TSQCuV"jJ\:S:Klp-.9i:7cqjM"##/@T&)n+&=r;:344+l6
%heZ@7nUTs2Vp.N:Vk"4s($?b%Ys"M`#M_KgD#!dJ.YG9\UZ>XkB5il+-()M5>:7EJqA;PoQ\/>4e=Zh8*$iLnX-Sqm)Tr/'Y0c#9
%3ZT"?NkdXF2.`t8$$J!.)intmF8uP'\ssR%@CGi>8>21)Taks[VC/1)fG8GG#FHPA=ILnK_EmELnX\=Pha6&``SEK2Q,#4@?Q$iC
%QfGnY(>E=HeGB;``j&4pBb:I""&18"PD$q_CZFK]^tfR[2r+"L"*j7MGFm@QE5]SDTWs\,8_7HNP^2A1^Neuh77UQF:@req"R0LU
%8J$H:52IpI34M5#3dSk!aP:M=Rsfq://G,l0Bb.sEU9`'j1#nH-[?orRN2[K<YT^I=@n-,O#P^GDd8>D)NDYVGcF`>`W=D==29`b
%*)&L2mUM%T6sujOiOoYeh&uKroaZ$t&o.UBGfIj50[;W>T*$B:W=e\0n\N%n.L'Eu'R;rp7ZEBfAE/%!9]c!!X:Mjk+=9Kff],k)
%8rZ1JE3qWI3QAedM`[V%H*3Zr945smip[J#!TS4$1U6qccD(N:Sh\VhNC\)S)dL2fo9j8IO2L9dMHKp8MdmRWJ\a:G%`.FU2\q#R
%:qdtEI3bDnCg9_?COLB9pj"adKJ-ptHX*XbBC2ILn)Q6_bURT0HhA%&j1/A0E'C93[ikeBJDL>;Jf8u[TuU?Qj3B-gDq;U^6e%L8
%/Z'XU_p*GqDm_0EZ)rAD^sri?GVNFgFKqnf*#Nk=<jLdJLhqlKPJ785;$G5mfnJ&rk^tQP!tHbjCeN9g:&)5#j:omWlSqMsC=t/9
%TJ/`.CaEo*/[DltVZp@$5f(Xc>+`uLD50@91O)Xa/ho0)TqltK2O9mJcG38Vk6n-^]F>jI:b92d(#7nW2QL`9^bJh)dqfL$]MNJb
%F'Q2n(n&HRdH_.LR)/ngkA.a`(Uer"_p8nP*Uhbp"']$'V_P63K5kJi`MZIJ_mnX2$H[D!PJEUa7#m)76^j[KH$*I)$AK<iJ:kk)
%a;rO04!YS*!?I])M#>JX>s&lHIm*QtLlnSlkbc\PHZao&T1-=c<Fq*)TVL*J>HaY1oC`2l/$aoGN]^k(CV=W*>o"2pQA@:<PsMb0
%D8XA=mP2iE(3&%iEYH`)e$pGkfrV(o5j;].2RTZq6Q#(1dB2",>YeeFkB*iT`NjZ+TS,+M1S+[mOjX'YSmo6o0WK(-7L&/c%!4+=
%!s`7BkR3Z2'L".4`-\uWG!+&CYFG2)"DI!:HQ'=2%g),DX=_&T_"AZoHnjU5m:'ckGZ\?ed%Tsd;GEOq6`SbNJ?s2opj+!sECe4j
%37q\ZG.JIY+VG6=YZZ*1G\rElDH:gTi$=s:\(V=0+*6*"FTU/n0_f\&g?Wcf4'4375^,IH:_Kqoq1>oh0>J)iH'Nagc<P\M"qHAA
%DiG&F*35tO2p5M4CiG??=j93_dQnn?&=pdOj"f]4[,%b`\#(k<MtpPcbE_I&_=5qH75fBm01.WUr7'RI_i%%o"#sTo9c7ATJfn.j
%q?=p@I3M2b/YFSo!iFNuie@(e`*OTDa;gSaKrLI#,`JeIo-H2Cbs`M0*j5t\j("\4&.8)dNh.cY87N7lm`RA@_5@>jj!aZT/fG!]
%.t,7n;8X=Jeba8i>ES?ZJ`3jR^#LFZmoA.$=&@*Rmn_tCG7jqO4K7FK`$I_?,,n1:ge2mdFDb=Q,l>RaKHT2R<L+KgPR,ImW,umV
%4^d%hlH#tB)F31Y>]e_7V\RKYF/,Wl@%LdEU(BKE#EYOYV^g5BhYdT=9[e3(nUZ"/r9e-YZN_'8ict0^DEW[Cr$P[)`AS5;3*uu'
%Gn=XeTm&%D.o="$ql+@0H,KbTe2(L0onFo`1`-=^n`s,%-$e)V%c%B5JE&(J4iBX.c*S^J^`6Wr1!Z]o^f02$%TA8?H2O;ggF7D^
%>Z0)n6;R0hY4)tt7cuZ6NsdoTX[@3(`^BI`8QVF.&N%;:^p):9f=$OH&"]mKeVuG.c`3KD<=$]!$FJ""Q/:)OM.%&TT\%?/`r^sI
%(SlhkIau)lpO7%K)].(@^r"HV+K&g)[rMKQ)XLF7J0EO$6DBF&^K2ReW[-53V2NW;C#&DV<bi$O4?^5`A@9;='ZYIITOKHuQ\iGI
%#fdYZJ>]2re!Th0/6*V+]gIAK#ZM_M[4.)#U,(MGdT2=%*dq$ji:B#?:FXS.Rj!+"8W1!tbqOfk3Khp<]e2]H9VCQ_'M6Y!1DGd5
%H"9_UP1^=%\>aC!/:cLXmXiUEJ&oXW8*PR^^LI<o[qRW:125])\Caf6.,TZ^6"Uk&:#oqO_4=NR:3N3p,^rA7+l.?SRH&RS=b*VC
%R3Sr'``9;"GTb5P>G>TsIaQ!`\i.-:kM5j8&S@W-UPYjYJl[dOCP/`:7ca\eKDQs-Pg`V,)fH+4b)U7$#`BELa4IoCg+tSW8[WZ>
%n9u.WG,9:=P2UC[M\1*NWi0DU$i$<mcl4^)e3ScC_,pj!K\qNp.%ODf:#a!\p^H*kc<_S&!8?"L7o(AB*C;ZjS>4%hL#_5X+4SJS
%%A(=#H.LW[fYuX.j?54c93/6./2ntp8@Tp*'au&M8H9!hAU^;(-C^We'>NQ_(_gaP##M[hi1Ss#^?WZCl.rD:Wd&F8TaWj]K[$8,
%L'Q$XKRo]BUg&.>)fgV&N\r33`^"9q/4,?n;?e*+WPf7$+A<JnWe7-;*>?)c!ZXbSXCq+DOo]):O[u7n`Q=rN$?.o+:^?n@+#eHQ
%AY,8UAqD`mHrL5_5#cg?GA*D@m9"j2nkrNSAqeNu'gI6i)TC8hk25BI_(m^?-T#]b`VGU-1XG(dHRCZ]-*<+.K\>k.dS5@LH=8%!
%`Eqg,a,e\;5m0r%<BC\`-er0(C\;b$=g&6'iV?LT,Ddsm%aJ;6JfBPt\);#l8ZCT'2'o4#j6YFq-Mru.lh8-jC(p1k8O9\&p@:1B
%2$WSB0-YDc_hK+SY0@pQ%&T/^BFQ1:4hq;K'lD6X9i^^Y1--:E#(IbhQ*2>Q`+7r"=5>hd=(#Ts8M::h%@+KA6J[BSTo+u/Mqc%M
%8:@Lm.'_E;0OhbS!K:0?#BZG2]+D_P0TG!js!?C<_%?:)5*dE#IOMZJFe>Z^/E4iddC`"nG_d7'oP=teYVoUNn6+ZFP[mE!E5@DK
%7Lrc+%XR)ZH18eqm([2Fc,l0b1K_W;L#bFr!AsV3.A`ILM7tirG9uH[kX>Ng)s>Y@"F<KpPED&C6,p<&:NU:ZDe!7?"0N9o\B4P=
%+!(-b^TB]kGMbL>Ls]tMF3#/Lq*kjo?,hTdW]o>ZMn/IRLiUQWDH[u8YjVl=.o@=I)_)J7_Rb?rhJ@V*I8:'4H0/FH9>Vo67Ed-F
%QeQ1-d$"0!:([/&b;`h-d%Ght:H*R*!hRs5PNG/d5qJt6^,jiH%d[hWbeOkG\n];Y2_p>>^X6VeL.!RqhU@Kl*O\#V]Kmb)Vr#4#
%DcLZrHHpKaJ^2)?'&S.aXcCCe9P/;?gdGWf6HQSJ(`<g0La%%H/JE'_,*SL/0\mj-NnMV3Sq_p#NSsq<V%;Hp6]u96R$i"H3^GIZ
%fn)!a6Vi9,ZLGg)r<9a1A`4b?^7HGc0m.*SQ;0UO@L^97:4/iJ152`G4KunPl[e,;@8-C3%SX"g[N!O5fFbq)*_;]A.<E@YKZX/_
%[D!)=-u4(7L]OHC.tdo;2RR!COl>BuF/JN&B/)j6HmS9GYN"[)Q%5mf@VI#T'fA-O`rPD,FQcI;Di@6JL>,.m;dAO>iW8AekmTtg
%XG(dqp'-C/ZU^8:-V]'f>2QPn^4n;^&E]n8?_d[U1Yl$A[NNnHj\NI'oQ[<sfr-U)kX9RTHr]T7Kk2P'6*Pu5QP3`LC5%2.TbmUY
%iA>hEo3V3E54ZN@1TT%10b#0^k6=^hOd[c7,O+S2KZaN]*N&Ep,Z,OC.5qn7C,_FaS#RIg!V]H;Y(7<B:pYtq'p.GBb\-V5"2@RS
%VP]+UA02(qep+D1OVS\(]BoKc/O+g`Em+jaka1>gH;HO.[iC#'*01Y4?9,WjD6FrLhM%N%Ze#Xg=Kg3R@0foGIGqFDq!saE7cr`i
%7YVFo/Ljhd,VMe7O&aL5>aY5@AsSFIg):a_m`sM`9g!pIE['?\f+S6?-c^5<c;ZG@$j[c`+VRUq(^GZgI$T!?!61nuVqU/@CreDD
%g'JHWN_Bc1!UG,(j-J1o[5D/o#FL>a2l8m<Wf+hh?'H#_DM+I&VG)1"M:tt1mE,,HdhMlYXK)P",[R_L.f6S9SBV.f%S7V%AKN.W
%>j3hSe;-8eUaq)t/@=8H\uXi,;W?-JUpEMq_!]fb+Y[t=#^P5;0.d&[,SbLSo@*pP"sjc_lm@+m[Z2$b)$9Z&ECA6l@5_Q`\6X'k
%qt3X$boZLHcUi"K06VVGPGRG"CdfdGE"5aa^*_>3c=u0SXhkA#)&5)Z"=tsTj@!rNR&J=&Q;SSPn@`h=09bp\'cF,Cp.Q]"!R$ag
%ZjqEf1fO^nHU3>F_6.6g&GMqcZ\oD=p(UC.KBStl44>R0B0lZN-5I"fAFCnCA3#1P"56`4@F?s81;PD]0pTgNU#Th@gImhi/ZAbK
%V96ooa^.5O+UJ2G;UHfY%_0<3GZg$?MiVIN$0oto:gXQ&,bVIh-L)6+Rtc&U)2C%Eg)2*,R(6K6N!uA"U`AY0Ce]7VRFDcSX-%*t
%HB'13OCDI.5FTT?9\$HfO8*m`l"?>N%e\hd(f!Kl$YEpe16>jh<n7sY.e:=>1UO1&UY6j\+=K/I^fo)hA39q;2+-^m!s(EN08c_f
%,A_kY(W@]JKi5"IEi(J)Z-@:O`Zj@%9r7$T``R3:l4k5OmWYQ/;hNkn=e*X@q#Xr4=abu.@:__k2^Afpnr[6ZUi^aZW>Mq+BEQcI
%"?/a#UD!/TRn1m.PRteb,ciK;Sg,'DqGKC-,0f7Ua1c)kC:,7A]-`ncmTZp_X)c)!).(<lk>5!f?j2bZqHa<4:T&oD5'9X!)bP/A
%N\sIe;g&\hUbhoX#$:%#J\fIWCNS)u&NIe[3Pd2cO"%;-W#_e*+MYu)3?'^WN6Pmh.+j(VAlN;<18?pK1?S86k]kY]dY4%L*c-J\
%m9GYSS2+%6gPrJi!clO2VF"nq1RRchpG?7<Qu-7JBW0?OO\T3(H4ETj_Vp<[R+mb74aH`*Q.)9M[U?`jPdbKa_M]G>q]fY=GRks=
%k23@/YXM:aoT6Vp!^PPt)`3=_W)J23EARGOU?G&2GjIptphGK"+T3S.GQm>/2Sc!'=Oe#q8eW'b3I0PK6)UfhmmCQf.Xf3=YtJIn
%YH/p`?F<"/(%5&m[Fo.WKV=%ZnMWaPa>V?F7\XO5V@<_@%ksTl(p83c+]RunD.K0"==[HTi<>"u7$g4ZI&DZT(I8<FE,QLB(tn[]
%h=-dC9ApB[00Tqh[#3'^8U-1mK+knO0e&Ms@t47T?4tD0`,E]iBE3t`/;d69[r]rg\IVkCl2-fVnL?V6P-3X!2D,B+KQ">m!lapl
%foMIulQhkMN-BGAT36Jk,PXsF3^=?UUL1goQ5rmh9Z]M1b.D2g753s+F]mV:S27Xfokclls/lIr+nU3,_6CXt<cPh2*;Sd%Np!$$
%gCht*W`t2pX\jah\kNDh0X4q[i+H9`OSHJYD=qrU^?A)U#7?Y5n(+R#*T.k?P2@'30j,/m[Y['TTgbM@"'_(ooj+Kh;Gl43,cAU^
%#ma.T`;bjo.CeEKQ'/JScL[SU7p&jK!fL2*>=R`pJV1,^WGp?MWMSi:lI<R??!RPJ5MkWm[h`qZ^A`nR2MF)Lgi=rV(\hinm<MO8
%TV0Y)5gQEM=87O'S7-pSC7rlCr'm'*85FloQdN]4A^Sp^\I2*[0`9:*@@%9W5pNK2Nc?ttLXI9eB,SJL@g1;i]#=dcC#LU%"TETp
%r_!AC\I/,rT;fi5"WHO#6YJ#G9q?mR+>4;l=Y)rAO\7#(MpWAm=D^gN)8+4cm4F`,#fcamHcGYH)WRO.3bMRoJg$Lliut0qHj#KU
%":B^i=h@@>0>BsZb_uU^b8J)8PnitL@Q8up,"O+(@rUJ5I$kkZLOfoY3;UiYf:*SgY*l#RSXRoiI,f7m.B:]5>bNk7.t*ek/e4I'
%9lpAE?X+egl9te0?[UaTO35'F*MOgd\^\/ngK7KEd7"][N8"$ScZ@KAb*c*H=fB*NksaPf,XH&$fh5aL063l4Tj5l(*'M9oBHQ23
%0>%+(XdcA\5#:>%R!RD7ggZ:gJYo)(=i00+J]'Q'cB-#u7`]9SCXAGXjbL^D/EB,cWPMok9B=ITa=Xh*@ti\0nnIOHno=CU&B8/P
%RIte?J@pK*Xe7DRb4TSOO$iD*08k?k3.<#%RJ_Lc'Qi]G2ik$MH.V%;85[[%.;!/p,]k[\.I+3rE6Tk+KNokKq-8?pYcCc0q)Qe0
%g&XoO!4A6Aj5PEqpc0]V1!'T9gK@Fm)=CX%RaOK6pIK@3+8:F:3,A3PH7hM+?qcjI=1Id?F:mM393GqC,he5OZl7IA1OssNp8Wrk
%kH-H<lHgq1Jh`OoknJqlCZ?Zpc3R6W2cNn#TpN164Gg]@E%Y)6*(<T-]78-FUFc+%Qpp-GS9etg`gnY?:n>fcqoSC;8lK"cD:974
%-0Q1TO@CX=(jbVOds*8jG3196G%9h&KXsX**&W9%GBG$Aiek0;LDLTaNPI,B/t>)_@SmoZM^^N[4fGYukS@B`JQEQdM`E$a`=b5:
%9tXs2hFm'ZO2SbXo@+,R1,uQ%A>(s,BNi#jo"5-49.eW5C:kkBIKHp[fsfV!$1(lWPuG:L'\eN-*TZ^*+1b!0,iY$B7-<off;`^n
%cd1b4H4cLg&sM1k,mEf^+^Y*gg;)00N@MbRMqM*d13HP*"RVea_so^-fmLB:gA`:j_,+UlSlhQ912D\l_9MAG+tW,apiK.j8)tKN
%<K[a/cnA9XFNMZ+0:U'C&N*P<a.%lump:C:\D>uNI65)cW[qg0T@E&7>##@5d]f!M/>-4oW^tY/8/K%`SQ.)#m(FuoLV&""Yn!a*
%_*c'uEp2deU`-G,ouR^K4)G.?`=hl1fb"A,r0&m28-fUi5ui<@a?sG5p`q4a1h7C\.ji6UE[4?fC;glqM@;I99i4&'OF6cHQm4Nr
%p=\6C6?M5Jf/;I4%aOcGRHIM:kZI]#\W#N66Xgb+S1p?SZaUY(`76XsP,3e:h&C.h,Q)!'2?KeTWa;2-)o:Ybcd&\Z!0)C&f[E)J
%O(,Jo%0Da3"_D=]mq4AsV@4geCpVdu-*bE]U.GWW8L!Ce\SL.*b.JaSFd!C$k/9c_]!@,fp=2eU8B=g0f>JI04\-cWh5Qt160ND'
%OMR0Xr=?&CDuY/sEa[V2bge)j41jF)XX.W"9*j+SKn91\b[Yh/Wo[BV2`qAn.34MDn7u5uPLuuM?(Zl0XlZ)S,QI6Kb*XP%;'t5>
%%iH@Ipu0+)>LhssHOE>tGA7g:Rhodj:1r);2&:Uj+0*qZ_":r!DetT4&>,iq=nVp+H8%'F]_`8<jHHl=#qh!&>9pn!1!A@)mm50<
%RRo!+W/3P\L'[5#:%$Z+HQQkCh_O+QWPN`HUb&#n`:fC_E19P2(_a%[-6/9W06:bWR<.V>3;-\:#MF@/-jik^R.&0F@r;88B>!c%
%q?&Oa"tl7tP0IjMZg5L6MAIY>6,p:FpX@*M4L/p@!\;:,%bM9q@8G>r4dmWdDP9&X'(,si+p"KL"c8f,G7enr7s=3Y3)d>s<anDT
%Z2gtIX8k(YEq*+gVh1sX[VHL-p_ZJW@X1Mu.#IU;rG/-q*NU+\G)U(<R0\Q]j"icT\Q8KsQ1)]>+b]:$rn`(WHZ-QPWUB7`o1g+*
%,=i=(fF'-]D)<)5!Yu<h,6rmg]jf:<@64A_LM98/8YjCf,US9i^?R$c;L'DYPQEF/i7HVLl6@R+K+u*p0<i0sK/.st8JJM5".6"<
%Z;Dh1(q[eN7B`+laJ7l@>Q7#%T5JtLSEc?Z4eQN87.+H4;CmC4.sBMjoL`?h\)C^P.kJWGK*3#*3'8)#1L8KA?LjGUbK(.g6QZ[L
%*\Ee8GsjrBL,64J[AO7Q@\Gb:-Z3@M"CuRXg$Dpn8:"AcZG)q^mf-S*cHLi$S$7+K%dn15;[dP>eUbU!L@<dqfh`]_a[o`7,IA!Y
%?;6U\6;of0V1VS'*$+@cW=K*O,]P<IBU2DH:U=Y8iFcBai7W\MCoa0qn3oPLmqGG(Y\fqPClh$&2MZfs^G`jD6/fYPL`\=8Rn_Xl
%(,ao_Cnumi&Ei"=n*SV^^`dl,.9OI%$1,#0H=\h8Ek58h[r^U\JA$`kZ,G2ualdkZf+uF'"@OAFji=+d#^Js=Cue=Wp_5b>1sJ=b
%F&om9=bM-(3A6L_]/P]qBR5+P_MsH\Ur^BjOl#$1@T;T>_YLT9K6mRf\\nXk?(VY"`//>mP1F?[)@M`3Wmg?,Re`BC$?p'GVST<q
%VQ+,f)M_or0rb:\AQoas/AK6%+A!0qO`1";bRX'%lpM1Sq5B@Z'Vj_i*;=NFGFUdi@#`QEVKc6@^8S;:?#hPcndd&3$9T-Zn&Q$7
%i0TJ7PcfR>!8u49fa/;]"n4A5,DlsF?kq@h=sel7;*]XT#W:b-e;J!_,h*>CYP0No%2=$'0QDRI&6QKIZcupDJ;XO@TPr7<`hn;2
%P7*&3*!l%M#=Ua80cURQ!4o'!g,dj:_\W/bk$ncbdnl.#hR$e0Ij6d:(>9n6a>g'IRmUNq=DUG.#R/PEQW7AA%p<2]G=\YPf'nc2
%^Jg?g)"csRYUJ^FS)b)W<T"34>DE]GOK4j4#EsMse=;)XLL+([Vd%]84S%&jp@OYS!qsO5B3+sA&SfK"1&uAp9;CZLX0Js[W:_8p
%#IoMkFstCr'm+H=m!SI\&2&@..V=NY/JcsV@hhVR._.Wm`g039$)HrZVB9_m&><%g)f$iMTbf`O7VBh=-kr7`VhcnDQM:n(F>uMP
%JG8?ZAQY+@7^3(OFbjh7g8g3%8nnVkVfg7F,9F1)4(7]5_$erLS$I+.1r5#k$BQ"Ti#q:o^-g*\C11umJPT(9go&:WYX!aE8Fb(]
%iRK#RXQml(`a2A2_PG.uJ.!V/I(TkEPFBFQ;,CfTHn1@\(>e#C(@-N\^=aaB<)"D\cK^=L!]]po+:3>oNL1$)mjk^+(JRUtTqVB"
%&>T>?&NUVj40:__pm&[L-k"l=761`0bFRVBT$WQ-1C>ghKb&EO;6EF<O>W'cAmhgBj'V8:Fg)(>j%WA5ioF7I0iO/\I2b%"qaj`i
%Sl@;AhfC2P2<rXbPObJ08]O.`fK9U7Mi\Q9',g8u+cS%pEVc424nZp-!goUm75hE@62Bir6(UIfgJ<-_'3q;qn:8S_Z^&`_YKW#C
%'W7E9BMVJlVIG@IHf(kc^M:8(8I_h<bLQoCBF:(f'0u8q-?LVpTW<6`kSRD4<Epjj]-&ehI<[2b[,`gkfgP.6$bk8:nJ0+Ag8iAN
%Xac"[^cmVaoI5(j[aoTH\iGoO.8?'XQ6.NA,eJHt8iT.<gju;5/Bus%GJI8eNr2"lkIt7=6'V^89]CY!koA3s7O#[U/@3ts],F\_
%.>^:1)(MTI=d"+T\0.1]4u$I<*YM!BUa\Gl33h`i$Nl0E!g:8L9f+U>;<no*8Nj!f8^$mH<f>ZW-k>tqh+'?fl`)aTd9s$"?$sBi
%)_lRI"<uo),,(DV<NKFRpJs/g^!--$=\V(2kU&lO\g@A+pe&@8]FQ6<n.m8f@R5j&IOsE7o94b*G7,Uk*"lQ2C/e$[ghk5:,6YYn
%.ZWUjg/R$n(ZAY*0,?tBe=[k#@W6j%::!'4]C7>)98]q^YpLtm8dHQf+'#."&[Xjf_(A>(;OrA*`[m7Wk2=7=eMP3fCY,YC/\(4)
%Ge^<kDPp,h729B=Aqe)hdTHctMSh6SFOgAU-MaeA&6]j;,(b>N%GI%o*>fWG#,t7WJ*\_@=U2X>Z;P`_+GqSGX&h!]<Ncb*R+'_S
%er5'P<2'4)8T]o[mLn;)A^QdkeskMs%k$/[f^ja6+#Z8-p?5t%Tuto?//K#EI&^;5#7AT>?F*hZ7%-sSN=],,Mr`YCeTNQJnij!B
%267MV\q5TmH&WV.#+)2qe9G.()@F(dEFTGi7#Hb5Z.Mp;(/).MUpFaC$d.4uY+*PVUUMp/o;/@GehMptfG8Lr>N&MG>I2W5fHdKQ
%cDDs90ep$<cM0B._FlRn's8#ZF_j\9n>4U#Y]C^OAIhN)C^$iZe'r_[3a(mW<t4ns^cL4@Z+'k<oh;A2F!0^%Wet)R@7YLf;k+lP
%h!(9@+IT,51.F10:2CqA'ss/RJFG\d(,/(\'_RGUhM`NK*&n^RBYCL7KJ@p"/fqi''28nFG=h0QU8SJ(*)gjC6to[]=17cEb3;aH
%Tb?JjNjB_@4O_&U!E%_'$agc7%+l8oVip\EYjs/9$7%/\17,aPbJ>*EV-llU7#t"WViucNYmO#Y]9#-$QX8c!-J#GThaMOV@:8dt
%$mTLeh;'(:@1-tC[kY'0PqDBgAK.'Z]1rtC;IUp!"ZnFW2[SPFpFE"];7jYa[G%Sm?S4t)A`ljhGCWZO'k>9i1e^?TX8+*<6S>?P
%S`YB`n5eUN%`+<+-Y@N9@%p(7T]GfIR;(q&1rI#ibnA(9.P<`;-]pnM@Z_L9c.NQ^O@`%XNhjdBS$u&n&CL8h+o[<U?WEo+LD$j9
%W#:@mBrZH,nE/$I^kZA!JR1(#gSO&h9RJ^dIO)1Fn:5j7<`ZnKoUoQZfkf/](+hq1iC2UYdG0JV=5b5dbsgu!TV3'uQMICmKI?#(
%=i3SYN,ku"d""f6')3EUi66o/6mrKf9?3d%JU3hf<hai?OT@u#e<FY+:kO(j8a\OC3-1^$qQEgKJ/Ns@q$h>A_8<:Z&h'AMUp=Lt
%6!Im`-lcPgL'tb@\N;<U'hirS^B'?VY+f]X=?2>V$OP4#2j#l"!L,A=0j!_3AqlX*0l>j+r.9WO6W,-7S7rWP4\;e5=f@qH]tE9&
%\3r1X-$2Dt*,K@4)ZW`FG,D4$$^&TWA>L.M/42HH.!mS2^dKo.#>_KYO/g::_=CQH;E`2$@1O0sZ<a8?l^$%H!\$<m#GQDtpFm6u
%J8SYV$+O#Y#ns6llq"s0UA:UFVu\46!%PhU;KB@`"U9-HW&H35FmPS+a43#qZ4Ff&=gNd;klR_=M9q*L/4DO(d<#`V=CN7HF,XkV
%c!oq-!#,Sg`JR/;$8cgY6V]@s;mh<XNY=):JertCp<cpiU8?+BCmXd!SL$#A2"Gp(e4oL?'djgHSV\3kIZ)/X)f$mb`PQf&GVOhH
%,]Ok>ZS3.sE1-o6;9HGNB2diTqQa4\-41<WWD5lV]5AV%7\?_RD$VdtbMA<%CE5q]5\1W<,V'in<`Oo,Jhdb1L%\Q[i!Z\&F/Kaa
%*SapX,BhQ&`nKfZ^bIVj0657b,<[T/n8:p_Ft]^qE+fKmH\"C21C9@k8@l>i?=7,BLl9m7.h_m"YYb0+1(gE\UZ>(Q+r"<VD<(oH
%oRguU5uK71OK>\gOX&"JV,tk2;S6.#C/A+\>dBJSpHmQ,-5l$OgF;$A3u#jQ&U"rq`XReD9bE<h;8oP%MNYVOPOk]_"n<4O'&^C8
%l='Q@+ka-,`8BT=/;qO'1.YMmj^d?$6a?!X/k*DKUl]+CitY1IM>S_RYnstY2KicS$r\<`"l)G^i],,TK.L+$,1]`^^VXqRG[`)@
%N2CfiAFr@<<gq=*8\LBsIhCO0&LH#G9YI&"5Iq1p%F`);CDA`"G?T)=NO`W-+T4_T%*/WIOeIWCo??YZn1IirG4BN+&""=>b+rjY
%`!Cd"@1okB[61s>f24`C\iO6oI^2$s2qfk$SE1/a!9l@*UVNr5Z"@(\:'+PcCQJi+<>'`*]:+!GV#N,i896lo/;KCOF;G#q;j%aa
%iqdn^M6SJFb(Bk#"hPDEK[CsZ\r^km#qjuc:SLJA_B=6uZ^-,op`I2(\;M+r2q-h]8LHb\mXf"O#[3[petP;eemlK*'pf4-e>K`W
%XMJ.ocoNC[>SV*1PR0,iV(#!<&.G"nLY+3t06V)`I"Z]=g*o>e&\/:[&uJ.Ai2:+r\'T0odiq`LgHGNo,(;e+)cn32[[L93;+:"_
%kK)Y$:0"+D:-Ff+oO6k00t<&@Mqsmd:_J<8:k3=VGK3MIeA[V=@!'%8!A`KWo*Hj"oko(Q\eI_hF#+[DJ=Mt\3Tb%RG([*D_19_@
%$o$Oe-hjYC[0+:Fboh@2Xh)=D#'a:6#LGo"Y@YA&!Q`5/9nVa:Ot^-OAH:aPZ"W@6M)]&*VUuk9\Wc.jQ#pT_j@(\[%E+L(SI/[b
%TBB/MS88I]lcTWP8`:)*CPL2A._(S1CWP2F[3ZeJ?q"S?7?,;NWu!j.%SfL\-2Z=V2="1DRK63M_%a;0(h\:ZCOg*f*9+r&XlJdS
%=<kQVc5pda23%7FV8,*:?"F?&Salj.)9uKqbXu8lm+()\buNfROirA7b^bUP@L!A21p&!/8rSSCq>ILn5Wb-UF$F!r+^<U-XMuL9
%3,1<GZ-IZ/*,D2>@(>\?^oaT&^#US2#N/\@W6io$Ne0V4SQE#>ED$U%2/P=pML7<C]:PUo/N5\e:8o1ZVCs#D"mkd;:$S&W=@qKA
%`fGCGY99Y]+XCeK\KV&B^9Fos.YL@D2db`^kit.c&U_<k-6i,=eLQGOSqQ\>cO,&h7&cu^#Z="S+[,Ne4S51OQ=$Zr]W`=!2ghKO
%03NJ%Ek-%f'L.8/-?,>CB7(iBPC(4bA1d[-7>6,#n*k8>I`5)2hoq"11,=qtdoZ6YY`__FArI:<:V.Y,dZj(=QU$lr\1BWCcI."j
%-g'X/=cl!&6'?OLJIng'-sgr,UPEMl2eo$r(`4<P"c:5i2c!4MbR6'.nl#ebVjHh*+tlh^1ZkpC9255T0k"G=l%0F$@#JJ2J@gs^
%:(f;aH*[OYQlNVQ'EON*GT`01Tj0NNr?X5R^i3:Ekl\lDE+UIFDn5,I_UYEOkJsH]&D'9nh?p>#Pq0Y"C[hd,KQ"*e'3o`*ZM,V=
%9]KO]%*GYuYeVARJ&+9)X->lk/"A08>7&A&@Sk();U"KblB#E-QPjB^Nmlp./Qh:G<YN'i24GkN78tGT9AgEr4\%2X#GZ[q46:"I
%4a#bJarLVq+j'Fdh7Cm;7*b&!5SA]h*A<jR@WcMCN.tg87X$+E$f:-QF-Nh\2EtgHc.YM&]:Cp7d4?Qe:ip2rk3iaurG5@U,Do'@
%!4u0:)r7,_b\*^?8RZWF;#(@$;el0R5Rt<"G,t>L$'qBZ9`:hh*q7DK6M:pM`Mi^Z2.gO=_1:(qO(R,Ckh'm/i*'ju5b;)Do]6/8
%-NfU*_;$pm74X3qF0*L,E)h9JYYS#\-I2ZsH7&-:.XmM*>%L'-,^+u4@2e>K(+!>*1@#>PpFss68O1F90S(Zd<_b08(.d&T8U\Mq
%JR.GRM8Yskmd:i>kb1=cL$D'!8K&L-<*l^!0K(@,OZC5LrWpu;e2L63Tn#c]1DQNtQ9R=-A-;j':-qWje>kl@D!-VVF*7]F_p3Q#
%OTebQW0kdt,'1!`Ctu<!O]SLgM3RObAPu49;d6>lG(R\Cm:&G:-=9cn>K&lqKr-"80GQk)2%?i&,m)1^W%TS04MIj97!b8uE_mUc
%8D\cp7LDnSaA??RY2p5QjP5B(9U''-f\`EK3;*(eZBd-J0Nlel2&pXgjYX$3MQY2T'r^0\q5rC`NABRFiY]j:B)H&`Z@PGBek0E`
%\u9SH&.-5YM?FURR.7S%MdqN3#Z^HZLC7iCEJLQ;(+j&2/`6fS6DVKgQn^Z=_,>rTc<i*BM*XdZWmqIc:/j!/9oRL;E*>0XQGkGk
%`NDb`P*Lnee;MP%p^lnX\+E#.]d=5;THYgh&blqeNO,L1-%-?"BSWfk?G\On(AAqYd;,5C(S7XU-Gd!PUC`O:d0^T'/ZG%-VfSPQ
%p0?Gc?>GOs$4ln%,i)@=DI*Ta`8IpbmA6DSSdV#"F/c?8Rose/$;d+?,e#qe%`A`2H`J#S4_V?IF6mJDC.Xj5RmQ(=Od'sBFo%2_
%PF+l(h9&:8CI-*l?J#:bZ7bF1++d+l=]4H=:lER$[ZXt\50-"k>REUpaJJJb%@$pok1>Wj#f&n:2tZ6j6,4V%4mV98KV3/;H]<N*
%Gok-CAPC\m&U6R!i9?FGr63%=4%3_!)Lj\P1V.X,WKt$sjo)I(d@&ZU%)kDGD>(tNq`?*JNGaKpbE#l"1a3"$A?U:!]G<CMdh&.G
%W!W9n;QlNfc(d6r(9^+JfTs%*Li$:/nQ4!Sr,>km[FS6X2-=Y]ek1R;Dq_]aPsg(EG%9H0M?n1SH!+=BOL#7-KrUf;D1-^14MQAW
%$G4.<0g.olr_9f@>$7`.e9S_2T37DP#NN1h]-.(Klp.aeSB9A0&9WB!EhfkqB(#"boW\f$ef<O#@5fR#O;O(;'sA@>q4_Xj!,K_+
%Y!lC\Y%U,U>dXoFZWQ6.n<lK:[#8J/<-'T=GC&ZBGq!^djt2@j[)HMM%O<pCA-1LTbUFWqO.k5(EVa/oloa+MgG6tG@$o/<pO_J<
%Z^m\r'!ABZaq2OEPu!(R_=\Q`:,CE'!?\GW=?V<VG_O&:K\,=/HW[*fm@8%dYIQg*iC.3'/4*Jh.oFPSlQ>BLfSd$LFqd!l`S6ta
%b$jgf<;-R'ij60t[mJAn[hWol#p=^b:5);A(6qqAZ1b`2OCS6%[mJAn[hWqr+X\k(K<8No5Lf4TUqba"V4Fc3WFq!%YCG%6q5=s)
%"$OTNAnJ)NJ>h=<mn4;G"1"].l>&I30dSD<iWmh#[@CS=@3_ilBeU&C&O?`KS6Kg,1</6mXC5h.'?'CU(0SsE]luL\9k.J9KI;9i
%VhFsJT"I#`j-\Yg=Y"pCh`&Zb28GATYMrugET+HkjM#79V]<jO&g_K&Pe\Fof.>WN==ZaDX>ua8=Ko__(fSr,A2.m_kGC9>W[T$(
%+\=_47B;Rb,$Yi:C@Fq6Xa-0VlgYk-Ort+G:DT:#8LNQ:\kIrCp9*Ep8_B+a_,I$Y,B^QdXT`#Q+9GdB%^PhGb+\baROkb,Wdqk1
%qMq8-hRs_Dqf'2l2g/8G\gO8n&.:C$dKZ[%U>Z7do;EPtadJ(WJu<W*s2&6q+tBS28.T&Rl&`a7GX/SmFpS8(R+i"`1B_#5\qUdT
%OS-]1;Gk"L]+K`O<Od^$V@3HWQA)6Vm*^jJn/S#&TS.]eFu!;%p8mf6dSVpJD:UZ_\Y5j'.LnFa(8Vd+n8YO%Md$+g%\]kBJs",/
%9]'enVZmkqK*oAd\%cO[kHIh![$ZF)63A%XJZ'BRe$+FHj(5DV>?#$#WRb!R"W+bPSP5:M@W*U/fQdumM<:je&_AWkNU#$"Mj8L6
%kTV>G$,gnXCGdXE"\FA11.YY#4EK"0i1:X9!/d3[DR<GD([)U3*6^BXEZ&[N)_e4=dKF$+G2(a>+cX0'ZpShl%Of/hER>3!Ql^T+
%<_68tGMV"D&hJngO7KE`dQ`+%%k[MUH?R\Mn>`9^?/&.=?Ye9Q.Za--SE,9`6UhUe.js,lUa>=Br8]0]'>pj^Yf-/GLsnFEc:,<^
%2PYC3g4`KPWglNc9#"nI3./M=ndW&Nh>B5sFr=8%l`];2+dYK]PRY%)3IJX#`[HlGJa:XsJ%ZHr7ZGLs9?`F'Y)Ni@$KJE03(FnG
%6mTo).=qf.gpJi58X^c]dH&;EhbD45/\[9=lP5nKg38[QVj_WP7_22^j5m8si`C<'p[P[t-FgrID=sXr;QS)p>?f`HT[<co/Jn&q
%D:qRgql'B7-U#7g5JWqWRr;ZS/0tfJ0VoH)`W@U2W<0dX[P'XdUJV5JZNKUP"94:=2\*hi!3>G^qYbN"e_l6U1Z$2(BkBlbObm6Z
%H+]k.,@!rJ*rQ2I5.!q[\]W!MYHYOs2!KpDqZ3RK%='4h*gB84fEd?Dpu1_T3glkJp!bu:iL<!d0UP77g@KsFl#Fute!$PtUhW;R
%"utGjqa]C9^o$pR*F0-2;WM7'a[(NQbOA`pM,L.?J0gAm,+AtHN*8*.;N4_8(*+*3WWZQV`_n[,o(jT(A0rs5>_cP3+g7()GL8cV
%\-V=U*&DOZ%*r41r*iQsoFT\aRq4phO2NQlMi1]Ai:M%![Flb8B"Y1-UKW1NY@mR",FD;(@>)o9MKU-1dG0;sJ;qKo[c-5]p0=jL
%]2I!%cXO+\B9*SA?&"pS/h@8/H5o6RXVPPU!Dngqqt1iT`4)Tf\61cDQRM;'8Vr($L=X)ab]>H0SYF]5X@55XaKEVbaur9\0/K9Z
%bh7Wb1Io3![i3I;.XI[R.1;g@0_$KmF'&V4E)'o2338gjL;ns*omdc6^k*Z)B.4,qg<hD'fpI4FRnXV&oaBL\iVSd>7^pX-?!oR`
%H!M)R*F`fU`/_iCO@'7c0/^rpeo7CVW!BsjkmI62%;2j+5t0FJ6.cR3+KZ=elf959/C;.pn\9t:00.AbR!9O8Vj;iWBlqW91je.3
%Z%1#o:H^OsdA-ag!SJD6JnL^&0*t[p%$baUp#g5Zi[-)3CDDH4\Vh)jbtNY#^(1KVg/d9V^t@0J^qTSMX+aQf,GZmr+p5n)n_Hp,
%'3Kg&e&Yc>[G<8/e[W",qBj>O!)2Bm"?h?p!Y"!s![M)'6O(eA!'#=m&hlkF9?ATqL4Qn\n(AukE$=P?G;'^K**LQ#cjhK$Sog(D
%Esl"=Re0FdlnYb;6mNnk#It`LJoNZs>=M@u,J[4=Gq&1I"KZpY;F\1L6d:KpT5?P'"9;-GH<>+(@Lap`@d?!2:(qR+H-`?=-2b\<
%$sZ>"9s]WW:iPSs"hKj)4gC"<IQ%Wu-D71*N9n_1^hbU=a(>kK_q<V$7sgN;)OCLJ(mD0*D<pCk_Jm3L/-dj_dC\C9D?7]%k.-5D
%AIb/o3?TI%0)udB%EZipi'LOJ_G.=$%md#hR%<oSg5+Fu$G<l^X4CCK:r0\^*4A78r:DV(=s"kgNkqi^i3*JZ"LjIe`637Z*t'2\
%gJAT_G"/Dl<u^%`P]J_H+Xsohh798DPo):5p8GgDQ;rRq;*3^O.Aj!gVc/anE3CQ=Q=.?j4:"2bn?'2U3*W['0#4?$UWgsQBI_@i
%[U/-C,Pu`-JpifQYYuk,ES)up5`4f8+r@hSU-bDN1oo]6A6@%/Jb"u2n0?b@a)7WgS<aN*7>2(8q':]r>5U2\'=@87&#j0;L"<WP
%V9>hj:u2YQoN_KS-RasC/`BI+K`1V#*,;'aa^<Pn3eVX>9'j.YP3.KoDPud'GptXk=d;>sYA!JUc#_iA4qii*`q?/>&'too$<]+q
%\UR<c/*Wmmoanqk7VT7YXdZF%J2tV<%hl)nURH'GES6%oHsh-%!\YD)=KlfDU+XBl/m0C`@G]s"4bQC8mWi-sNnlSfWb`TE%KWJJ
%,VIp'?1P03>h5&qXTJTf!C^5r0^-bTXEF6<=b9S@:$m;R(FXDEF9X?71+_c%CPEgCKHb\1#*p[QO:`XeXj'K+OH$%S/2-F7O['4*
%6>t?2H&)mq!RAJ''Lai;HgjXYXTn/9YYus#3j5DL";Nm,.7`j#^oXiAW)9\A.Q.;:&ss+b9MRrMZoK]rm`aTlP@kO:4&^7tUtNM>
%$dEb5![\=L>To'ib05U'+0j,H$(*Md;o8ecQY1Q2NEb7nFli.AM9Wno7kleQnc]$tQCWH=4p?!/CUfq)XAPfb#Mr1;"BS\;TSJWJ
%7>(s\;M#@\Cdg!8#sUliBmHs<QR/kSg6MiL!0kM.!Ln0BX9JpG`Ko"1(57:5aKj58!31m]Of$^^FP"Q5N[CW]K".@.T62e'""g==
%XR:6g0f]G@Pt0>kO+"C*EEH;LV_u;Ci[,%Sc'lre5^Asgm_`KD/%FtOdJ#N_/ktRFP@cmnNk].)87IkHq*nbDB?^^>aG+t-48$o#
%gs2:-"L"4!8S,iK,enZPRF2UbIF+DAMR(nlRt+&3!h@T+Y)OIb`hml=;:Vu4/>7TX2kW(<T@Zb66P7/@2&:oJ:9S-E<%Cnkam<EP
%j]roZ)%dGJmIo>hKuFa,nAW,@<"_1"[I%2`+qgfm_a6bVa8uY=07Cc,c;l^.0UgM4W>\9j68f4q?Gg5WYY3e1$2E(8ZWP%j&&BU.
%/6dX_QORkGOP!$+Q!+]Wer.4X!Z/dWLk[K0>[D&3$U=s2^f1GQ@QMR<2FjL8_Rja;6'9h9iSHYC0KWCSD:aB)i0Lq`f1PBUX)KG+
%1dI.uH,2AW.3Q_/,c[N%X=>O4SUjL<,O*SkpY6[#^;^SBG257Q`K1-j/SSSn:I-K]&C@jl1)A5(8;&7a(hk1K8kO1lK@>V1%*]u@
%e2Mj$5rB:LS>+$#d85#rW'6,Ho['sbF1#-1,,@un`SR_a4fmVNH!WAZYipacjIBe(Egh1_aH51ZA6!Y$QdLFe/Y"9Bju(]'2QL[^
%^o096oTfl%d4K(dB+GY.>0"uhqqAub>3A_O!]@Y*:KX]+VDk7B#d!><WGKKBS)$gkhhVUTR(Na\o($)eCKu7j6W(rlm5$3*Z[KRE
%K_bQbY1n\G"1cVB3QOjY!MM+57"%CV-J&@1!<t]-<7d([Q>2`DS?e%1VV]gM@-G!E!u;'[\i=aN]EU'&;;kh?Udj]&l0%UW:nV[:
%U]r/j<=4l<[/`[k7\?eom!3K[gebDIdL%P\),PEq!;`(+kKs$U_.sVT)nPDdS'ZKUm_bR4)SWlE\5jQ2C0KiY,S:tJEUW7#%74*q
%"-4A9#'4]hLf4q*$ug4?<3!5)aCX]DfMjW)<e-OpXMZCD-thih8.S-O)JH2l(-oJU*(Q?'#sr<-(P`%>+Y[:_M8cC(]VS!s38h%k
%&gXRl!Lj*M=TF:%;h8B98V$PKG8c6I/Ss+P)_pN[L+aUrP#B#Zl(Us?/*F*SA_t\Z*ctE)Z%MYHLJ_KLW_%nR[o'X8F&AT'ejJ#S
%Ue[@A9Xs@PSAq]3ke$Q86s:>`ZqtqR#?TaD\ZR3u2Hk5oPZOl-nVe*i,(_b%LP:hlNfu7p:[=<=dod1hGd9had+LH[DJjC1@KoKp
%PrMKY<D4n:"jtR'c5b5*p2`hC2Kt?p6".ee<E2V*83n5+<B[ikDLo-CRnlq[Dl[D,6Rj+MULfQGf>**ZcY9Q\C.WcQ\s\_OUSI_!
%!%r(O:&PV_9,K<SErZs0#@Df*dJLfS&6pUkphD$erbcVW3n_hAedPWH#?@6Nc2:<"/d>Qt_8ZDEOe%G1>s"-4,P#a,:0,OjRQ,SH
%4W?e&-FfJ,UrY.W;rrJU/83-&@gQcJQDC'/C-bGnb3M4U;'D;a9_110QHD%Q@Yf?tR_FVW?IK>DP)bH8RloN(4"'G,aXXnMc+D+h
%W'V$UG%qF_=%c?jWTT(9IV%3K!6fkbfNc5bh,$P>9m@+gr7*-!*7u7a9eM_;k?ga03u7""SdKLa0Rj/'U]IbLqLG7u0HUA0>a"3\
%9riJNP&ps6IjgA^.PAjOZPUA8$0c$k]tdUH"mKC?TTk*U+D\=a%#_/\W\@rTQIK@s\\*c#.*n*!DsC<9YR0Sif_#'Hf-m_oZcZ3K
%=>U/&.Fq-J0P5(DC>k#_[0%3MG%U7IN,6<2oqF.>)=aQG%:pgVapZb$*jpYQ3Pp!bBsqEHJ;XLhnp*-AEi>Hoe0Ju9/:*+$[D;-[
%Z^o^H8Q^8JUlcJ1;F@4W3PuWP=Jnqq/5CUF]Ld`XER\&q9ZdQO#pFn%%K0DoS_1qJ%U`nJQBVUS`iu\).p&?/"mEeT;k9fVXf[t3
%=MmAA<P*"<iI;/kZu[We%H)WaRe\^!Fk2dn82poMh2A3OKUnlMY!aV<,aD$f6<I@lF.59DR?neeAl2Q3*cV0Kh*=n8(F]F>Baj!*
%<4G0sYH5,SmLEbk&2_I\W3GO;%TAGo'F`2k*NCC\&2b4dO-Y8>0<6qEQaDhSpT34QMeRlK2g[LCikPaM?*[-k9ePl]gCtF[OOmW4
%"RT,("`<eKaP6@$\P+W14@uOuQ2j>d7CiMp]r;f5<u5dYFk:>tFBsE%&?/hGCS$1I$fEjDZb[UM>4nReXDr/Rc"@Yufk*W#@qQ*K
%U=NC].S[*,ot508^U+_8Qs!8'?XV8Pg?[<R/7u,<06M!G)^X89<6)3^"k"M/$WW@*W^o05MSaC+Pg]jMEB$ts&uEeg!OF]lDV]g]
%]auc>hAS!a7(?Im<YTHYRY#f2:*3$Td3uF!D')C2FE/k`8qp-[!Ndrs:;,D@G_63OXC8uL@J";-2-SD9e'Gj<;C$))*mF*)n10L*
%!=*H]c9+!`C<MM1JG`V.8sY\?OUa6?6Dc(?!n,>=p3K"EWE81&4e,9XK4#0E;K.u?,fLhTd`d8uODe,rP/A44Y^h(4_\R#:eJ&%N
%3,-Tg:OD\6?"14E;b:VP76&h(&:Il'&*Ml\@H$2M-WbDJc\66sM0iRT((Vj7!isqKbg#R;?h8u[fSjL[mAkL8X7o4-%B;mbJL>t@
%"riq:31LRG<CD)T4_s6][m&@,::,/aWLDBDAp+.)DW"dfm#k':ChITWBU(&63`3L?1'CJ.S0fR..Eqm3D-(kqAB@mgE$6#(bmfDQ
%P:rD`>$Qhf%2Q3Blc=i!X/!7+Ef<.C0^IO@qSi0MoTWU`\#6nb0,dd!EM"Ae2'f#Uk(h<pnVD1:f'ht@OCo>1=3-#bi_T(g=[_+_
%72X7iK*.5e)?PHMQ;tV-%YQ2NN;Y5pOr`r#`8DhCKMI\a(IcmP/UYH/d8X#rU<kIH,W#r\&Zaud(mM^R7*026TMC=<54.?]HT2iG
%F<F=e:Ro8=I:3EdG>5D?374Z)=OjC=F=@apKkm2"fNTM#4C@Eo0*@"W\O678]hOV5T59_EihZ#_e/;K*51F.5(TtdUk&:Zm_Z:Ur
%e:!Ie$J0X_Wm42)iJoIhl6dq8%K`-6$K=5bm?%gp$pPqD%i#U;ps=AmI?J7=WJVbf->F/<D9aUD'7ojdNIno4d5\1\I=*^i[E=*Y
%TA%^q[O6=IQ\_GHCI'`@n%m8J)Id;t^.ds@0km$q7E_=:IkaB%^=s&!-Xb^5DN1T9J[\G'H9@G9h-T&<3=V<X[q?m4G&?*IL(`/)
%Y)kF"e<IjBnJ@_,ThB7\-Fru\@?=KQF8G5ggo&&H.]e`2<\Y<!Fq+O5r=LnlLi0fS?L-CoZG`%WKmX".@cq(K0d21.SL6um%3*fU
%BN2$1d:,D'dB\HZ@P<m^cqI=<Z.:?>FGH<q-?uMG\7]_4G0]<lA?0\DQOpg()@,_^;PugV_V<cAC)8W=K`AqoN(eLH3XjnFpD!?_
%FC*n>-7kq5EgN;8YR4RUK#W7^eL_Cm+HNN.@Rq>6''C`e>!<Xc-mWF?''2]"&[u_P!aKK\XRj-`e"3Bk#X)["#c][F#q,@4qI4WU
%eYu-\E)%opY2jEfqWR&!2c'2fe@8F10CmPQoX\=,Mj&c`e_K53r"BgR>BKoXFXDg5i6;.'1)_aU1p_gtg.blN3i>B@:bhX&S,FO'
%PUl^VVWsJQl;R:Gd+B-B$K5-VaR?[Rr*0e\S&AY7?7]"J.-c/EMF0%<#g8gABG&@0$WjE7Jrq92CW-;=7Gpr,i*f0j3#]b"VQuX0
%Bo-$L7eQnr6?_^anpQ'+.c\+[2+gr.5K=Dg-lg4b7^FO!o!.:gd3[<R$=sJ$$htA#aChQVV6Vdc33oJm`;i(TRR;nB4Zu':7+2,)
%k6IXLWFsXK-9*HV#tJm:[=oB8\>\u03#N`JKS&XnkNG@W6dE$@5[G6^E^hW^XGqj6V\kYXp#KBZTTCLNaXU1^33(IRI4:h%1"r:b
%OQ.%&(s]NHb]g1Q,;AQ;2pR,jDHh3%MUOVc893!b$'iEMQK?L69T_bI$8!kaL*Qk+"_NHp9'pnM!:;:k6OlOgfnnL3Y.*=<YiT^2
%KFB@74Q4[&(cK92-Q(Q3DcrR(Q6_7.Eons5T%$.V*%RkVi.].]&-.WRJ4@uDXOUssDFq'iRb_]Y"K++N@p@T`JU]lVEMbPc;;@+?
%='$A67jrNC_:Pf,Jh*!4&UATR!/tGti[I.cOuXQR"<nFhZ-kQ=GiR#B!%-"6cFICIQ_\TIk%Rl:l)EHC,ngkF/pXTVf/Skae%\MQ
%aF-Cl.PfM@"_nKB`AjKrn6;^Cka[sg+TXg<T%%.GJ+$R$$ZG`L%dD&s0!_al*;+-e!g@o$oX'Ed=SN@Wi$r\BKb+F8aNW:9EJ",Q
%6!7U%0P.oZA(KXlei9)KX9aF"=.Oduge'#?Bk#VB_+c3nkWkeC+=UjK&<#$"ZUUSpEVQ9iC1(tB'`4Ouk*cJ8*b1hd9MCWWB-9_D
%/7F`TXZJ3rC(iIO7S^JiP;4hk94KQd@'J=]JXai(1Z=a[L)H1+()!>I$:s5j(DB^qeA5)9n<R:jX299C78-Ph>=`+SA'+p$X0F?Q
%Rdca8YcIjr]"6#$(20)N,(<Ff#Irg.X0"^KBBRql:/]\JE',6g`-hZ>:BPsj6)E/lEXDZn=MSLi*,U7^`tU6F58C38SAGo$Q"&dk
%2U7HCWJ's<:nj%\nqH^mUb82,5UX>\>JOge=/t$]idR,V]+V?I/$u*u?N:gTVq(sf8NsJr'@K,=\:F1,<:$b@^oW3P0OrNn&I=+,
%Y#abSS"JtmL2rYWpsg-"KsS<XhL,6s5]YrN4k,hDB6[E%Y3+Fu#70Y>\,pWV)HW2K.N-&:-tn,<23e@C8h!)S$5T2>Y"t%rBH?OS
%T6@(iiMb`ehW=fY56&TB-ZG'O*r"]R$?m&R8tE#W!pCq9c=29,dg)<C:U^hXHB37\fU8>Kqg(/em8pXoq2'GIl5#SBe##rCBg(c*
%J/,t9/&3[Y+8eX)4T9g.NTn0`jr>e<-8r:`RA3b%UAPZ#g7amRk+8M5gpBIQOHN>ZWPIXUWgh!GdE0Qg9-/=M%WnDj2N"!dZA)8Q
%[mdEtN41<M]4_nBbIUm'iLBZX<"@3MA*(hRbH0hV5='RDBR*OP3X/_7eGLieQ^H$>l^g;cG[62C6e]2Qjc,Hp/<!?[1b8P_2aB.c
%:a4KJ@Z15"&BDO1V=E]'#Kq$!,N2gG/qjc`^Kst5MRBepY#i,WiaW>AQT^Q2ITkF)ehJA0MPr\Ep]/nb+8u2@d#N=Z=h7'W(fG<]
%Rmln&V1_JY6Xl9Zi\iY8f4MZ_JO[@N;E101Q"[abLoXRcM0G!/qV[;o9@?/G;PnOh^$eY>qVK';od:s:%oM]e`dd@Frt+lfk#bjF
%40,mjHdCO>O3;TMp1.e8\Tt>8JZn.7DO^u#PX^rSj:Jukan.,UfZD"P.8/1sZhP(h-/\rT]aa^@RqpF;5*10*4e2bH9/bIA:^@c#
%Xgc=iKUtM4-S+$UP-;@8>JNHYAU0.4s4tiASnU9b:$d.:qF]J\_f2)1R<FK'86I="[b^ShE-j;,c?bgV:a=djId8gR]u&+(i)B(6
%9F]`!Y'2%3TQfO<#X1cU=OKh95[&j_,[9=Eg4&VH#F?LWG5D-YAEMR'bDI0q>G&dY[c"1eMj8:R,W.)6K58C-gghLSNk!>F^cK-Y
%%ijsVqh,:RC^WESKDH3b,]=gb1ALqEfa".EI4XXLUl#+5?4^)8RL@qnNc-gi6gdU$T5DF!_S2h6DK\=(YMW:Y,?qU#U`tQqHU5j_
%>-n,1hcP8S#X5jC2k&P0+I&bBMm89^l_fp^M[1W5EL%Pj%R2L5T9s/Wig`@a"$13n(TkCOl;(=Qfqai^MHXU^OphZi>uNZ?Ig9jb
%:-;35lcJpTM;KdTP^>-]+`H4l<4^1!Ron-"JE/`-'I&oS+VU^SWD9aWRo?Ga!Y;)j]%kH]R,Y8rfKgdj&H>*bA97#T\j.MRb0;u2
%$VVa$,5Efa#0u;:NNjmGUA)O60pt&B_?uKOn$(Q=,*Eq*HJ(S0,qe.+0b][D]IW^8k&ar;gR[UdcLUV1:g3&ZD5*7EUM2mq7;41j
%p9BTT.c$Na)PnhgS)P?]W'lhbftf)Q9A.-0(kDE@.8$;^'LuV".8#sQ<>$sHMXmo!Y&RW%Q?[u/?/3)J2J;(C+eOQq*:es-`?Ck0
%>TNA=*p4]=GarDoKu_.M?f?!E`YWliLOA*$EQBLOf>lYX\N&]*aMf=[`Q^;XIb\L7s*($6s';O;2:aFn:0$O#-(1qbCFNBQOf>d#
%-`,<ud!Na24]F`S-ML@D-,eN7Or!'fPr'uk\Y9^N\tTgoAQt<"`nr'TK'o<EEJ%NF#c/KpVNG>U)HSbiD-&Q'?:N[_q03fl+8:#<
%Q>n%PZ!@3LMe,Empt6E&bduIR1&Es6?hEr)IuuPNhSegu:F9Re_9ug/&SmhRW\T;pqJ.+oZ0MK)GV*ZhTuKZdclL9"@dq>#FXU(/
%&IHkh*4\'f53p]@P6EPU8sE8M*1)=6U\aX!OE8<<$D+2M=N0%'G,tHQfO3%5+p6WnS%/Gh:eV.`gB`Q>G:qLBU*Qs3@]))r*U_E;
%Bmb;uAM>'ij+%2t';M:/R;ZR';s>'o/L2Ds3A^/$/k?`i3kj%lEYCdUgUK(0a!?:J3,r+V*+gma\#Z$=_sD'YCUFpoJ:NQ(AKfhA
%Kl!p!Rj8-g/C)"1IZOpD[%_%WXU0mU0G<Qu;51d=B"!PBjQ_sH^LRJO6^nd+o;cfEG]\<,jQ4A:bF;Sr[m+bZ1Cif]^P6fYmaZg$
%q;V5+mE8SgDgqZ[nY;##\(>!Cgmt5-kF;L+QN)b*<]08P6htBf;ZG^,Sfjk"Dl3[0lAO/r$_<3_UQ?Ur404TJN*#)QAVtIG.G#0D
%(8WTonM=-YL3\:.U=9CA;_MZKRd51E:#F^r=4R6,iQTg<fS=j?3g;Wae"2aPf'/'#?2@#J-q+^k-XmmShq[61prI4.Scf$J/+%Q`
%WFAfSdntqJ9Jdj>-U=VldR/%5.7%H=_b?WVOn$f?@u+TUpt/3AO!\!_mrN7<--NcY</6t;BU0U@&@K'_J=g\pM0C5O1SjuB`Rh<e
%hK!p``@2P\l)]`&-%esfH9q+rQO<fDjIKn@S`uN^A'f81o;,@8"&mtQ8Ghe,L'LSfJqB?TG/OIi35=(pn2tk[p*-,1;d?%J/:rRf
%gY/J2e=oU/N$$N,nJ.*$>P"Y<>9#:N(T!+@gfjVl]YKaiAkm#1S[2F+hkn$BU^tR\):3=%E:`A<E<,FH)0kpQi'bQ-h`U]#&$M<6
%roM\bn`M"/qtJ9l]0YD:?JKpP\Y0$^^H[3jrr(sGk)Zu)/oNuScn@?UgXGbpX-_`$T"k9jb6r%\Vjj0V0/dD5qJPoklMPPk`I"&&
%^)8a,21=C'^A-a#o;hV6^eKG>?$=MAmJeC.oZkK7q"g$Jg3e&7p=5)q/q?.-:)Bs*T3org;(M'-gHN1DIe0Jlo8CAsg"08/4W?b*
%c7[HCZIMM.[;:/4ro1uehL>L=hS-p8^O5ilh1kf1[i?slr.j_nDf:,Q?[mS%iT7,T?&datS_l2G\?F;-Yj=Tg)RT@meH`iR^\upK
%X`h7ic(E9g?f#,'fKA?2mVZtBG5;+j*o5]0r:'\4gt.nUj"Picn->i[j(fT3cJ,)Dp--4hDP5qSjf?Q`LVK7Ho_/"LC:9<`*bbN&
%c0NQt(S>V@jQ)?M^-9#uJ-YH/1J[bA<rD#;?`],gq_.:C*5C2ufjsoBs*<8m5IrE'^S7>b4$+a8-5R=iNanZ8TS3?,N!GD4ROcm[
%,f",rBDh@_2b&8cD+qR`4b)@QQZKcOlJ;u9JtVJe383%;OGg'*f_tU(,g[N&&V<5hlCW7Rb"MH%]ElY/hN^FiCYkM-EZVJiN*`<3
%86L0UIer+rTDWQ`r9H7(:Lqqk(-aqB\9[;2GlA5o;P@nE,kafA^>c\M-6Ks`=aQPPrZC_)AG'2V@".jp>n1,1Zjs^:5M))X:mgM)
%kifeN;l9Ke%R4M2*kuT?h$fkU[^#Y8@u%1_O.Z5Tn(]8#:#cP-'^'l$n;q`[`Y%"TYS\D\IHooiZ&(sm6Pge$-2dY(./!$KH]"^V
%p829kj53W3rhO\opF4cCQ&m*u5tB5uAp"4=0/i[QcAb,*n/H_Orr%((1bTX1p._X5H-'U0#m[)91/l9K2k^DLQpE@R\r>ma:Q6k<
%Db71hMmKp^UKp6Z*d*QkpEIkaZ%eWd.Y?G)K,_dp,DqAT/7_#aCumk\)>Ll5F*'q_B8LfSmJGI>_Ud%QlfY)==?;6-RYB,WM3?`)
%$@Ye;SU]L*&_lWN?Yk5>^G+>\AQV%F@d(A/D_7PX]opdOk"^;Bnec$1fI%rXcG(<rl1s.r=-mhHI.kND^Uj7"(&\7mjfe^OalQmT
%hd5.;O3`TCG(+iGNT:o%?XCL]]!Op79c^b[/p-Z[RJuI97?HND^)/(+$f([?K?lG_N!\Dq1u#:P`EYX?kV(8c/dH]J2ICpR"5oeY
%s4^W8pMYcp%6a#Zg_g&#QFd>"o&@Ju?Tt&K=bf3PZ"KiX'f(!b_bL-UIIrPLq>A;!mr#;Tec2?4dFgGMmpf6hE50*"H2IG^YPrRK
%4:gHh>[>'in`KG&C>.ml%=^.+B.r-knDsN/ld%fNjo-L5=Z;FLfe@S"r00M@?6Pg6bE(rdOM&"^r-KCH^pcO>fKBbJc/)g\@(TdY
%IiKTh0/$\G(nWp?q\#nf?.$piCQcH)s)lBf",rPl(+k$Yr5\WC\\2>-S=iYb]t:oYB/R1bcGtJ8Edmo^-R"8*_94dh'.40DrV`X9
%28nn:`H:<6rVufpcoDd%nDr`kmIfSA]-lcckHOH'T`DM3IBdWCqVkk3J+eYe(RJSpqEJ=Xo7d/,5H_1rN><&pa/d%Y`IP>1_0E&p
%eJ<T)`UCg^X5Df#QJu8$1$&'"rR89j]K:Tt<cB.en:10`hOWQ<4<N"uo?4a)^R1Ge1+%$XI/N#@Fn+(M="eGEeW.1-d>OlS$f/Pp
%md2$lb=5;'Ant8YH#jJK")$c2@'>("g9r>gc[N`IJ,Ol1HLpOCgGa=8fDg)golB?V^L18f.JpQ/IeB1S5B36H6Jq^H=,EdO\"?3j
%Im7cY4:GEm"(CAFM#2'pWM>%EV;c@&R!g6#F`[)^b83BOTs&??*Q#jHq''qnT:Rri%c@'CT;S<AYq7fFq9'<K[C>CiX-XY&CL*dD
%U?=IRD_E^b6ZE&/05gY\I!DM!IIN8tc@5<6jn[F[m4dniNBdE,Kt63rRIccTYTNTmm"^o\mf*(A`Bblp5-Vf?[E0WdXm`H[0>IPQ
%:QY=#faH;0ls&Fm2g7V94hLX8h&gQBd]<+0CE9M7n]f<3D2l0npgr:?j.cEXjU/c[g["j)Yu$r%#W_ghi:G@bqW@_Lm^nt[gD??;
%S#`%5NSiN[W;"-*hqqbo]KY!C]=FOoT_e&l[UCnG%lR_=iId-)gV(4CgMINC)Vj/?^O#MJI-e_hO(6+p0/d`TrhoJNo]W(3CR>LM
%Dm/&)/Y/?*F34X5lAolP?GF2.I!,GNmdg)5Io=J7=-miCY21cpnp0oUmk<Srog>A<:krr1=ICeClH3GGIX/64L@_I4Dmj*+kAU?s
%lR4fhfB4e&:P)*OgH9e/G@T)X/7[Lf7di6b\UshRe\KN`2152eo&=QRb]i5OkH?N3+E[;$c.fk2Q`i##GF/>LpCj%1+fk"UMRH\q
%>ePMJp)^6"rtr-;rBT:r5'_R'q<%8Ah<!e]h<"$>BKYIG)]6/r\UAJn@aCW^^A,Ujh>6kp8O'CrAriFJY@prqDb0Q&^$g'IYSV.j
%=apU%aQ;5^[VCW;j6Z]abM-_N;@@g<RiuH^6AAo$"+'Y]=Y*'Y(l-FD$*W1TmDfD"kMJE?MrWCGNn46O)#JJ5+2@Z":A!;+2u`i)
%J<TNep?.gf@LlF3,pHDMEZnbM`?^]D.<,Em(;PljOMI,Vp$7%1ji;k!n1P;Y*=?EJLe"JYr7#*YNFG!685dJD_t!KYidVZVj(W'*
%q1!hMUmAQ]kr$@6b"iicOG<Na5_e@gQ]Q;e;#'d:5;]$'`k4`A;G2EJ-ij)R3Riso[L+B'8WFTM/Kf+""5:DhX2Wjq/%jN@l@Jp&
%mL/VCWA:nBFX5N&M/aG/8p5UaBauR)+SaY+!#1+3aX/Jkb5F3pBq<Ffc/B@'hg)@<]kE.&XOrkF/Kf+""5:,hX#]e="^^P"omPgV
%#0.&H'!`<DcAEW0i^2-!*<1$WT[Y3OSs]T:+`U99"],O7cCUJhE1@"["<[JdP(N"XAj13dqq9MQ/4MIhcHCO&;r:p?`P,p@-W3*B
%e)_3U<XB(p_:F\TZ*uWBT&LLN37U02c'&=LEsUM(5#bqMMS6>DA/BAOD!$6TU$n(*0]lq&6t5>`kXbfUnI0*[d[oUN[o[gZDqXkW
%W?.2+3'`_Ng8EJ,@DLu1&UW]nn>jOkH\'Admr-3l'd4k`nn-fnNP-a=qD_S+<O+i.AaOkl^CqQA"PGM>8'Q@_*?A#Qh*ni("toY0
%Bcnc.8ruPr2s*j9\e4RiFPBp8QuD!kDteM_G^mo8JYPT[44T>*jr(X!^rD'60G!54*\3*RIe8X("lrh.-#Fhc9^]R!m2cc=mr8pL
%onRe+<8\1CaI,[3-J(4W*9MgX?q>/M]-Q3s%8+]<*"hFmjPj8<qE+nna*T(O3p`).WeiNT17)it!j>WiW^A4#qg:&9IX_;Qc=%^#
%k2L-q#$fG5qhChCEAb<*^r>L239.iW&=T2hqF_>]j1o5Q%=#8`B":(.QCmUL/j@&M)4Q;nSFK3fT>5uq*-!jH"2Oa.rQQ2D\/Q]1
%eEU_;)\aY1=V4Q1>Wmj;j,cT(PV.r0(n:%pnHeNh4Nq\uLOf-.L?pmV@6tt93JuL0=X-VLB:`9J_G`%:%:M5/T%[R8^'oQ7^a^5J
%GBu@O]19a.>VeL96r5Cu`$V5P9ZB7A>`Oq"aq2*%<^Q0dUrX`&nch?G8k=uYX53%2&Fa!0!4hG0kJ%_i3[=C'!O%g)/K'('h[<\:
%IZL9\:d"/lg=2QOg%Mp%=U7PHfmt)U+eV)(T_or`fFT]ir-(1a"MDK,3)l0CK7X>@VR.+`-MDG)qXLdDi7/J(OOL$\mF^TKJW%kC
%mpYN<f=bP9G_i.:'sCXo2W/%boCKZ2:GUsM:"MpsR3CO_Jd,g\7A/om3u",62@Yua98#oL#h0)unBO<rK2@Y5)l_Sqp2tWdG^lcE
%7"qX.Gp&.<2N^<,F_U`_?VpSGZZHRt5t@6Qe570>:L+h+N#'5Z48?MT%,C:B&Fa"m;8)#H^!pQuK,n"V)mViUkg%@BPm]@FSiG+X
%i>@9T@\mX4Z)"FKI3&IHj!g)<^tBld@Uki6Sq2-FdUbkZd8(_hg47V_A(_7e-G[o0'sI?(GmJYU]@$D5!E.%$h.[aX?c5<Z36@:c
%Go69YWaY5u15JAJjFqRc;199#(_t,8q`G"oa(6AF-E.]L'sS,YY?)_!-5GkQnWgFUXcGHI52r_7hOWA2`nPn_!oB]t:bm>EjEo%P
%W6ULI[fBNm7d>jGF<*%*K^:hG)c<;NAZFdhUC,Z(^+Kosmr&pP.!r&]<Bt.]D916WTPuDL5)WF"c\m_I<U=gQ#^DDWd8*)CT$AA<
%+er$o5/K;&e[$e,@&AjMhPsTLU>Z]VLekS$0D=3c%fu,p]8'qZVudA6R?H!\,-#Ym4Tf#mJ:VLj?`cNL$_3jHhi'A>jWo;UO>`_C
%*'*,^!O#NhUp2EYS=f6RcHksAqk/ZqT)Nt3%o1$<Jja^k:Z0b9kR(BO^KQ*#(V'8<*d,2ZCV)-i\fQ/;fPQpm<DV^FA(]ic)hl.m
%o9<ae6(JQ]7CCn5+lGL96g=r\QSJ8*/9P_G8:0$pN5?GCBl]5@aL&BP$3Rd749YQrb$l>G0#/-keA3s!eH1Os$)Ij==t5I)!LKG9
%j,8*e?ZBf<]]OF>a('%i.M6(R;Io<4nbHML-c%O5p`X3X#:3s@29Wq@%/tr(.?gE0nUkn8.Src!WV#2UMa['7<Sd'5&F^`B0gt$k
%#,U0L=5b$b[mMD`V3Fq&5)kbo8Ma8%9%:pZ$lIc39Zg[aGmJZ00:@\:cV'hYCDJ4%:6g>N<?pSPdSo);TK5LcFS8UW1O=,qf":5=
%&F^aO:M*$Kk!<1LCZ[(^jhd76ZDq:SV=W/aOH@]hQ7Hi5:+0+T]%Yd!+lN=U"aCjs1ImVUCZb+cF<*UZDM7D@p*:121.:5u*.GO0
%(eC(eYP.X7#^DER(c.3EC5o+)!oG'&@g9BoRkf'9h@@KU?G!<kGi"G.8ljl]cU5MF3ucFa+j#DNNbjK?5W;*f^u\$Q+-.0MiqENI
%o;d:f*WgeJAU)eWY*S&&'Qi'm)^Sl%!50h.GPaK*]YA$";:D\60nG6#:W2]*/nVcFk98bH._oGE+4S%L.alf*Ts^\g1>XcHe6O3`
%Te#uml15JUI[<>V?LGf9/eFYqlYAVQ%fmK&hs'_DnG\`IodEkaR)$\"D)\nS]GlbHn+:l2G^g,<jX];/Yp:e!.7a/rIQW"/EXfWG
%L_rc_g$SABn5ClJm`&MO!q@=Wf3pa(!1Z%*mILnYrg(s.CrU3-'=aG"7/UBL@`CKX*Wk3U19>":]3L(6:.6pC`lbbCSX%K$-+r@B
%MqA9`5QC*!H"b-^iVdr,&WoCB%pGkC,C9E=qB5srfq<AYh]?@MKT]$L*Kl<(6$]=#nP;A[L]7+:6_\f3h-eUAo8DX-%gdStnBBu-
%)tlJgOHGamA'!0Z;91+_m2kKV."hL27[-MF(pZW>=FBrgRnJ^l;Yj5r()>1Ob6TsG#I,sD-alF`>`V37R>[Tonr/B/3m*PTI#P`Q
%#W]b`A]UF=cmn!`EJ+qCLP^7O@K"uZ*jV>9GUR%BOS_n0lmrJT]5u$OY[,Q\9&Z"E%#GdK,Yh1G@e(+c'N#XHF?LUR029=bnu5.<
%l4%<W6t(25gTh"VnY(jDFZPO:A3<FHnrV`*UEDJb6OH1%M6!Dk8X/NrpN-fbMcE5+J2dZFjeK&31cRb^+ig)D.-In?nVNdhCHI7j
%d\Q7&&`o*/,Qka?d((A03M`d=$csR+]-FH+=3mU:.fCcNUa+L]E>`*CZ9om9qJm:g%OipF&_RE\iV`=8[T(ma1#?3t8;Mt>)FMqn
%O"qune&QfrLH`k:,-,@*9-7`delnmna\V^\a-%/@*^248.+H_$9M($l-`shPm,b`'iA$[Hjk=.`iHGa&*,nhn8%C66b)"4a3R2u[
%O43<,]HV77T70&*":]BO*W)`VOt(N^a<NhXYf[G7_Jqn5$[`ZB0ljDp.+F+ubFTHRFA3icaK/G*G2h=TjN.nFQKO&;HC#U_aRKYB
%JUTG-Q&<;K*XPL:Zm/'':.erL5)AD.G=[BsF3;/8:lZ^k^o=RBnpMA$B2gKI_N;n/l:O5Am8,o%I$G;oSUE\R"G.d/+tt9D%Pg8c
%Lm?/<,F"et#ELPa!ld"7M<C7d^j%PB__V\2)3,q7,()>SHJ9P-:hE34dG[9:*2*T^Q:sZC'6aie&0dbL1>X:CbuaYg%nTW6:i<a_
%$je1kaTt2t-0L>/-kQ_VZ/na)#=fUdSckDiT`suJ#SJp_/FY5SSe;/\n.b8HVhdD,J,1<;+Hml4\K6CXN?L;:'5luPN-><a&a53C
%k&_#9*_,4`0eY3DUC>i6$Bfu_f5s'r<l+l%6jb%%jVXRBO?m'&@4gQ(lAo?\L7fjW.L*+!j]INdZU:[:5SX/omZCI/93qtGZN#H&
%HGaS;h6Dtd%)AO-(cWH)-pr=UfHb!!o_p7?fD%G\@M"88O.itV+mE8M#N_gm+]a>N.F0#g`E#S\O^^P<Ap[EO)KLm#L@#jMC^*Kf
%-*a.W`$5\Iprh<'Q-gU@$5rSY$]qb-nfNpdB1D0hN$(&)!cm]Ge.]W!3t6EKA*(r-KlB8#*0rd!&9=&W#X^S/H>,oRr5oss"J=IH
%,d$TimDsO14B^V[jsC_0CTitsboc<R`/,uKgX?R5T74k4;]lh[]q_g'_-fWaTKXd4k@<-Q_!OaFC3pBBNjD88r[sTRHOiVMA4PKU
%*6VBCiQOi;7F!;$b8S5pKKDb"P"H`^*egYU+Xq7<;IoTu3+n>]cirM#5lg+'9VeHsFiZgME@h&c,_F6&-^?@gbG,K6,X2h1n'pC]
%@?Fih]1/crS>>L5Ju-?_J%_CGDpqMoL%gl'+2!F5Mcf`PfHQRq#`q<UNCjm7V(#"JrVOg,nVpg?,o4&?j\:/amF[X"R/%4--LuiJ
%<gg6$^_3'q.LG,VU]`fY93P>F8Oh!Z@c\(M8-Yap#@nd+;6M,,.Ja%i!g'ZZAt]H!'O*e@.r\?u.?3=,<ur*FZg6gHZn&'U;OK_t
%'GfGY9V'd<&d@\2?Q]1](os\[M2`UAF+HiS1*H'WKP.b"G@?s5ri*iKVhuulMI%Osct$/m@8V(WWmVMG?jhPFA_fjb#`Dc:m9J/D
%&rB8Dh(uq3-AG`CaX#nf8CDjZEg91B1D8)L!i5Bm7X@W-#P@@^@Ljp9QlpI'D%tS#P/^rG[a[#IQ),$R\Ig"%C6UV!g3K&R7"[<U
%Pp*K/LdQ`D,a3IkW%@hs_NLkZ;V?'l2%kO_:kObL)P_B^CnJm%af_Hi!S2tAo\jUdL9D@sGnbS!`I'ftKcXh=7kV5Nfr"g*:e5Fu
%XJ?OU!Q7`n-(DYDDb2J1"ou1[Pr1.>BS)4:,\-9GdA_G%8Ik)=RG6aocYZ]#%T"G6jE+3q)sP%ck&#7?Y[mDqji7-OHG7P'Pp6X.
%$)#>t\'qjPrDU\AZQdM5V!aC&gM2hk.KiWQ8`8?S0ZCnT$n@Ds9P<KH%1TDffTtW.*:,[O1'W_k,#lPf$eYP]Ulh;;lEmf;h/'pT
%>8!M]5-e^oZRXH*;P7N(.$IZreHuTY0s[T.<MeD($!W#+YEDYg,8P[BBh!"!A1#o4dL/2Z!+hWWFq)4n8N(gZoGS[Ti3-7L=>2'B
%E`a2hXWj18b&,B:kQR+qR-X`TZKJN)a5o#c:P1OBqrY8U-H6-CR4=(8+64,ITtN;bVH+'[kWR-cBsPEcaYK?:h<s&8`+=)Zau`bc
%R2&p6%SUjD[EedVRP>G<03ugS$cTZ]S_0d>bK9d,NHbE6nA?!OO_2><#s1F4it-mFRcU,H^!97j[,DY3g/(a&_OB+ZP:ZWqR,YmU
%^_V7$>%Wf>hMqUh9J84U\iDn=k4o8FCL,/NQTE!T2u`fcUH6&64ad.<](pI@*oFY6M4=G1nN6W]D`6+Lrj^eQ5+f:X#FN^'ceI?h
%@=(,2X5-SJB\8r#k?j:Jh/NA`pk0D&F?*aB^A[PEFn5jrH_]L~>
%AI9_PrivateDataEnd
